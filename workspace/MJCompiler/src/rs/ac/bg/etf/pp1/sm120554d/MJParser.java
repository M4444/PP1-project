
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Jul 08 06:18:00 CEST 2016
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sm120554d;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.concepts.*;
import java.io.*;
import rs.etf.pp1.mj.runtime.Code;
import rs.ac.bg.etf.pp1.sm120554d.ext.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Jul 08 06:18:00 CEST 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\010\000\002\002\004\000\002\051" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\002\000\002\036\004\000\002\037\004\000" +
    "\002\040\004\000\002\072\002\000\002\007\012\000\002" +
    "\055\003\000\002\055\003\000\002\055\003\000\002\010" +
    "\004\000\002\010\002\000\002\011\006\000\002\042\005" +
    "\000\002\042\005\000\002\043\005\000\002\043\003\000" +
    "\002\043\005\000\002\044\003\000\002\044\005\000\002" +
    "\006\004\000\002\045\005\000\002\045\003\000\002\013" +
    "\005\000\002\013\003\000\002\013\003\000\002\046\005" +
    "\000\002\046\003\000\002\046\004\000\002\047\006\000" +
    "\002\047\004\000\002\047\002\000\002\073\002\000\002" +
    "\005\011\000\002\012\004\000\002\012\002\000\002\012" +
    "\004\000\002\004\004\000\002\004\002\000\002\054\002" +
    "\000\002\074\002\000\002\075\002\000\002\014\015\000" +
    "\002\057\003\000\002\057\003\000\002\015\003\000\002" +
    "\015\002\000\002\015\003\000\002\016\004\000\002\016" +
    "\002\000\002\017\005\000\002\017\003\000\002\017\005" +
    "\000\002\041\004\000\002\041\006\000\002\053\002\000" +
    "\002\056\003\000\002\020\003\000\002\020\003\000\002" +
    "\035\007\000\002\035\007\000\002\035\011\000\002\035" +
    "\011\000\002\035\007\000\002\035\007\000\002\034\006" +
    "\000\002\034\006\000\002\034\007\000\002\034\007\000" +
    "\002\034\005\000\002\034\011\000\002\034\011\000\002" +
    "\034\007\000\002\034\007\000\002\034\004\000\002\034" +
    "\005\000\002\034\007\000\002\034\010\000\002\076\002" +
    "\000\002\034\006\000\002\067\003\000\002\067\003\000" +
    "\002\021\003\000\002\021\002\000\002\063\003\000\002" +
    "\063\002\000\002\066\004\000\002\066\002\000\002\022" +
    "\004\000\002\023\004\000\002\023\002\000\002\024\004" +
    "\000\002\050\003\000\002\025\004\000\002\026\004\000" +
    "\002\026\002\000\002\027\004\000\002\030\004\000\002" +
    "\031\004\000\002\031\002\000\002\032\004\000\002\033" +
    "\005\000\002\033\003\000\002\061\003\000\002\061\004" +
    "\000\002\062\005\000\002\062\003\000\002\060\005\000" +
    "\002\060\003\000\002\064\003\000\002\064\006\000\002" +
    "\064\003\000\002\064\003\000\002\064\003\000\002\064" +
    "\003\000\002\064\007\000\002\064\004\000\002\064\005" +
    "\000\002\052\003\000\002\052\005\000\002\077\002\000" +
    "\002\052\007\000\002\052\006\000\002\065\003\000\002" +
    "\065\003\000\002\065\003\000\002\065\003\000\002\065" +
    "\003\000\002\065\003\000\002\070\003\000\002\070\003" +
    "\000\002\071\003\000\002\071\003\000\002\071\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\004\005\001\002\000\004\002\357\001" +
    "\002\000\004\052\007\001\002\000\012\005\ufffb\007\022" +
    "\015\021\052\012\001\002\000\012\005\uffff\007\uffff\015" +
    "\uffff\052\uffff\001\002\000\006\003\346\052\330\001\002" +
    "\000\004\005\ufffc\001\002\000\054\003\uffc4\005\uffc4\011" +
    "\uffc4\012\uffc4\013\uffc4\014\uffc4\020\uffc4\032\uffc4\033\uffc4" +
    "\034\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4\043\uffc4\044" +
    "\uffc4\045\uffc4\046\uffc4\047\uffc4\050\uffc4\052\uffc4\001\002" +
    "\000\004\005\ufffd\001\002\000\012\005\ufffb\007\022\015" +
    "\021\052\012\001\002\000\012\005\ufffb\007\022\015\021" +
    "\052\012\001\002\000\004\005\341\001\002\000\004\005" +
    "\ufffe\001\002\000\012\005\ufffb\007\022\015\021\052\012" +
    "\001\002\000\004\052\042\001\002\000\004\052\012\001" +
    "\002\000\004\052\024\001\002\000\004\010\025\001\002" +
    "\000\010\053\027\054\026\055\031\001\002\000\006\011" +
    "\ufff3\012\ufff3\001\002\000\006\011\ufff5\012\ufff5\001\002" +
    "\000\006\011\ufff7\012\ufff7\001\002\000\006\011\ufff4\012" +
    "\ufff4\001\002\000\006\011\ufff1\012\ufff1\001\002\000\006" +
    "\011\034\012\036\001\002\000\004\052\037\001\002\000" +
    "\006\011\ufff2\012\ufff2\001\002\000\012\005\ufff6\007\ufff6" +
    "\015\ufff6\052\ufff6\001\002\000\004\010\040\001\002\000" +
    "\010\053\027\054\026\055\031\001\002\000\006\011\ufff0" +
    "\012\ufff0\001\002\000\006\005\uffdc\016\uffdc\001\002\000" +
    "\006\005\uffd9\016\044\001\002\000\006\003\337\052\012" +
    "\001\002\000\004\005\046\001\002\000\012\003\051\005" +
    "\053\006\uffdd\052\012\001\002\000\004\012\uffe4\001\002" +
    "\000\004\052\330\001\002\000\006\005\326\012\uffe3\001" +
    "\002\000\004\012\325\001\002\000\026\005\uffe1\006\uffe1" +
    "\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\051" +
    "\uffe1\052\uffe1\001\002\000\010\006\uffd5\021\uffd5\052\uffd5" +
    "\001\002\000\004\006\056\001\002\000\012\005\uffdb\007" +
    "\uffdb\015\uffdb\052\uffdb\001\002\000\010\006\uffd6\021\uffd6" +
    "\052\uffd6\001\002\000\010\006\063\021\065\052\012\001" +
    "\002\000\004\052\066\001\002\000\004\052\uffd1\001\002" +
    "\000\004\006\uffdf\001\002\000\010\006\uffd7\021\uffd7\052" +
    "\uffd7\001\002\000\004\052\uffd0\001\002\000\004\017\uffd4" +
    "\001\002\000\004\017\070\001\002\000\010\003\uffc5\020" +
    "\uffc5\052\uffc5\001\002\000\010\003\074\020\uffce\052\012" +
    "\001\002\000\004\052\322\001\002\000\004\020\103\001" +
    "\002\000\006\011\101\020\uffcd\001\002\000\006\011\077" +
    "\020\uffcf\001\002\000\006\011\uffc9\020\uffc9\001\002\000" +
    "\004\052\012\001\002\000\006\011\uffca\020\uffca\001\002" +
    "\000\004\052\012\001\002\000\006\011\uffc8\020\uffc8\001" +
    "\002\000\010\003\uffd3\005\uffd3\052\uffd3\001\002\000\010" +
    "\003\051\005\053\052\012\001\002\000\004\012\317\001" +
    "\002\000\024\005\uffcb\006\uffcb\022\uffcb\023\uffcb\024\uffcb" +
    "\025\uffcb\026\uffcb\051\uffcb\052\uffcb\001\002\000\024\005" +
    "\uffae\006\120\022\116\023\124\024\123\025\110\026\121" +
    "\051\111\052\113\001\002\000\004\017\313\001\002\000" +
    "\004\017\301\001\002\000\004\005\276\001\002\000\060" +
    "\010\uff86\011\uff86\012\uff86\013\uff86\014\uff86\017\uff86\020" +
    "\uff86\027\uff86\030\uff86\032\uff86\033\uff86\034\uff86\036\uff86" +
    "\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86\044\uff86\045" +
    "\uff86\046\uff86\047\uff86\050\uff86\001\002\000\016\010\262" +
    "\013\156\017\261\027\257\030\260\036\155\001\002\000" +
    "\024\005\uffc2\006\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2" +
    "\026\uffc2\051\uffc2\052\uffc2\001\002\000\004\017\214\001" +
    "\002\000\024\005\uffcc\006\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\051\uffcc\052\uffcc\001\002\000\010\006" +
    "\uffd2\021\uffd2\052\uffd2\001\002\000\004\017\205\001\002" +
    "\000\024\005\uffc3\006\uffc3\022\uffc3\023\uffc3\024\uffc3\025" +
    "\uffc3\026\uffc3\051\uffc3\052\uffc3\001\002\000\024\012\uffa7" +
    "\017\131\034\126\035\130\052\113\053\133\054\135\055" +
    "\141\056\134\001\002\000\004\012\125\001\002\000\026" +
    "\005\uffb2\006\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026" +
    "\uffb2\031\uffb2\051\uffb2\052\uffb2\001\002\000\020\017\131" +
    "\035\130\052\113\053\133\054\135\055\141\056\134\001" +
    "\002\000\004\012\uffa8\001\002\000\004\052\012\001\002" +
    "\000\022\017\131\034\126\035\130\052\113\053\133\054" +
    "\135\055\141\056\134\001\002\000\052\011\uff8f\012\uff8f" +
    "\013\156\014\uff8f\017\157\020\uff8f\032\uff8f\033\uff8f\034" +
    "\uff8f\036\155\037\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f" +
    "\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\001\002\000" +
    "\044\011\uff8d\012\uff8d\014\uff8d\020\uff8d\032\uff8d\033\uff8d" +
    "\034\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044" +
    "\uff8d\045\uff8d\046\uff8d\047\uff8d\050\uff8d\001\002\000\044" +
    "\011\uff8a\012\uff8a\014\uff8a\020\uff8a\032\uff8a\033\uff8a\034" +
    "\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a" +
    "\045\uff8a\046\uff8a\047\uff8a\050\uff8a\001\002\000\044\011" +
    "\uff8b\012\uff8b\014\uff8b\020\uff8b\032\uff8b\033\uff8b\034\uff8b" +
    "\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\045" +
    "\uff8b\046\uff8b\047\uff8b\050\uff8b\001\002\000\036\011\uff95" +
    "\012\uff95\014\uff95\020\uff95\032\uff95\033\uff95\034\152\037" +
    "\uff95\040\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\151" +
    "\001\002\000\044\011\uff92\012\uff92\014\uff92\020\uff92\032" +
    "\uff92\033\uff92\034\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\044\uff92\045\uff92\046\145\047\146\050\144\001" +
    "\002\000\044\011\uff90\012\uff90\014\uff90\020\uff90\032\uff90" +
    "\033\uff90\034\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043" +
    "\uff90\044\uff90\045\uff90\046\uff90\047\uff90\050\uff90\001\002" +
    "\000\044\011\uff8c\012\uff8c\014\uff8c\020\uff8c\032\uff8c\033" +
    "\uff8c\034\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\001\002\000" +
    "\004\012\143\001\002\000\026\005\uffb1\006\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\025\uffb1\026\uffb1\031\uffb1\051\uffb1\052" +
    "\uffb1\001\002\000\020\017\uff77\035\uff77\052\uff77\053\uff77" +
    "\054\uff77\055\uff77\056\uff77\001\002\000\020\017\uff79\035" +
    "\uff79\052\uff79\053\uff79\054\uff79\055\uff79\056\uff79\001\002" +
    "\000\020\017\uff78\035\uff78\052\uff78\053\uff78\054\uff78\055" +
    "\uff78\056\uff78\001\002\000\020\017\131\035\130\052\113" +
    "\053\133\054\135\055\141\056\134\001\002\000\044\011" +
    "\uff91\012\uff91\014\uff91\020\uff91\032\uff91\033\uff91\034\uff91" +
    "\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045" +
    "\uff91\046\uff91\047\uff91\050\uff91\001\002\000\020\017\uff7b" +
    "\035\uff7b\052\uff7b\053\uff7b\054\uff7b\055\uff7b\056\uff7b\001" +
    "\002\000\020\017\uff7a\035\uff7a\052\uff7a\053\uff7a\054\uff7a" +
    "\055\uff7a\056\uff7a\001\002\000\020\017\131\035\130\052" +
    "\113\053\133\054\135\055\141\056\134\001\002\000\044" +
    "\011\uff93\012\uff93\014\uff93\020\uff93\032\uff93\033\uff93\034" +
    "\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043\uff93\044\uff93" +
    "\045\uff93\046\145\047\146\050\144\001\002\000\004\052" +
    "\175\001\002\000\024\003\170\017\uff84\034\uff84\035\uff84" +
    "\052\uff84\053\uff84\054\uff84\055\uff84\056\uff84\001\002\000" +
    "\024\017\131\020\uffa9\034\126\035\130\052\113\053\133" +
    "\054\135\055\141\056\134\001\002\000\006\011\uffa2\020" +
    "\uffa2\001\002\000\004\020\uffaa\001\002\000\004\020\163" +
    "\001\002\000\044\011\uff8e\012\uff8e\014\uff8e\020\uff8e\032" +
    "\uff8e\033\uff8e\034\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e" +
    "\043\uff8e\044\uff8e\045\uff8e\046\uff8e\047\uff8e\050\uff8e\001" +
    "\002\000\006\011\166\020\uffa4\001\002\000\006\011\uffa3" +
    "\020\uffa3\001\002\000\022\017\131\034\126\035\130\052" +
    "\113\053\133\054\135\055\141\056\134\001\002\000\006" +
    "\011\uffa1\020\uffa1\001\002\000\004\014\174\001\002\000" +
    "\022\017\131\034\126\035\130\052\113\053\133\054\135" +
    "\055\141\056\134\001\002\000\004\014\173\001\002\000" +
    "\060\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\017\uff83" +
    "\020\uff83\027\uff83\030\uff83\032\uff83\033\uff83\034\uff83\036" +
    "\uff83\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83" +
    "\045\uff83\046\uff83\047\uff83\050\uff83\001\002\000\060\010" +
    "\uff82\011\uff82\012\uff82\013\uff82\014\uff82\017\uff82\020\uff82" +
    "\027\uff82\030\uff82\032\uff82\033\uff82\034\uff82\036\uff82\037" +
    "\uff82\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82" +
    "\046\uff82\047\uff82\050\uff82\001\002\000\060\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\017\uff85\020\uff85\027\uff85" +
    "\030\uff85\032\uff85\033\uff85\034\uff85\036\uff85\037\uff85\040" +
    "\uff85\041\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85" +
    "\047\uff85\050\uff85\001\002\000\004\020\177\001\002\000" +
    "\044\011\uff87\012\uff87\014\uff87\020\uff87\032\uff87\033\uff87" +
    "\034\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044" +
    "\uff87\045\uff87\046\uff87\047\uff87\050\uff87\001\002\000\046" +
    "\011\uff88\012\uff88\013\201\014\uff88\020\uff88\032\uff88\033" +
    "\uff88\034\uff88\037\uff88\040\uff88\041\uff88\042\uff88\043\uff88" +
    "\044\uff88\045\uff88\046\uff88\047\uff88\050\uff88\001\002\000" +
    "\022\017\131\034\126\035\130\052\113\053\133\054\135" +
    "\055\141\056\134\001\002\000\004\014\203\001\002\000" +
    "\044\011\uff89\012\uff89\014\uff89\020\uff89\032\uff89\033\uff89" +
    "\034\uff89\037\uff89\040\uff89\041\uff89\042\uff89\043\uff89\044" +
    "\uff89\045\uff89\046\uff89\047\uff89\050\uff89\001\002\000\036" +
    "\011\uff94\012\uff94\014\uff94\020\uff94\032\uff94\033\uff94\034" +
    "\152\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\151\001\002\000\022\017\131\034\126\035\130\052" +
    "\113\053\133\054\135\055\141\056\134\001\002\000\006" +
    "\011\207\020\uffa5\001\002\000\004\053\213\001\002\000" +
    "\004\020\211\001\002\000\004\012\212\001\002\000\026" +
    "\005\uffaf\006\uffaf\022\uffaf\023\uffaf\024\uffaf\025\uffaf\026" +
    "\uffaf\031\uffaf\051\uffaf\052\uffaf\001\002\000\004\020\uffa6" +
    "\001\002\000\024\003\220\017\131\034\126\035\130\052" +
    "\113\053\133\054\135\055\141\056\134\001\002\000\024" +
    "\020\uff96\032\uff96\033\uff96\037\253\040\251\041\247\042" +
    "\250\043\252\044\246\001\002\000\004\020\240\001\002" +
    "\000\010\020\uff99\032\uff99\033\uff99\001\002\000\004\020" +
    "\226\001\002\000\006\020\uff9d\032\uff9d\001\002\000\006" +
    "\020\uff9f\032\224\001\002\000\006\020\uff9e\032\uff9e\001" +
    "\002\000\022\017\131\034\126\035\130\052\113\053\133" +
    "\054\135\055\141\056\134\001\002\000\006\020\uff9c\032" +
    "\uff9c\001\002\000\022\005\uffae\022\116\023\124\024\123" +
    "\025\110\026\121\051\111\052\113\001\002\000\024\005" +
    "\uffc0\006\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0" +
    "\051\uffc0\052\uffc0\001\002\000\026\005\uffc3\006\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\031\231\051\uffc3" +
    "\052\uffc3\001\002\000\022\005\uffae\022\116\023\124\024" +
    "\123\025\110\026\121\051\111\052\113\001\002\000\024" +
    "\005\uffbe\006\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\051\uffbe\052\uffbe\001\002\000\026\005\uffb5\006\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\031\uffb5\051" +
    "\uffb5\052\uffb5\001\002\000\010\020\uff9b\032\uff9b\033\235" +
    "\001\002\000\022\017\131\034\126\035\130\052\113\053" +
    "\133\054\135\055\141\056\134\001\002\000\010\020\uff9a" +
    "\032\uff9a\033\uff9a\001\002\000\010\020\uff98\032\uff98\033" +
    "\uff98\001\002\000\022\005\uffae\022\116\023\124\024\123" +
    "\025\110\026\121\051\111\052\113\001\002\000\024\005" +
    "\uffc1\006\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\051\uffc1\052\uffc1\001\002\000\026\005\uffc3\006\uffc3\022" +
    "\uffc3\023\uffc3\024\uffc3\025\uffc3\026\uffc3\031\243\051\uffc3" +
    "\052\uffc3\001\002\000\022\005\uffae\022\116\023\124\024" +
    "\123\025\110\026\121\051\111\052\113\001\002\000\024" +
    "\005\uffbf\006\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026" +
    "\uffbf\051\uffbf\052\uffbf\001\002\000\026\005\uffb6\006\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\025\uffb6\026\uffb6\031\uffb6\051" +
    "\uffb6\052\uffb6\001\002\000\022\017\uff7c\034\uff7c\035\uff7c" +
    "\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056\uff7c\001\002\000" +
    "\022\017\uff7f\034\uff7f\035\uff7f\052\uff7f\053\uff7f\054\uff7f" +
    "\055\uff7f\056\uff7f\001\002\000\022\017\uff7e\034\uff7e\035" +
    "\uff7e\052\uff7e\053\uff7e\054\uff7e\055\uff7e\056\uff7e\001\002" +
    "\000\022\017\uff80\034\uff80\035\uff80\052\uff80\053\uff80\054" +
    "\uff80\055\uff80\056\uff80\001\002\000\022\017\uff7d\034\uff7d" +
    "\035\uff7d\052\uff7d\053\uff7d\054\uff7d\055\uff7d\056\uff7d\001" +
    "\002\000\022\017\uff81\034\uff81\035\uff81\052\uff81\053\uff81" +
    "\054\uff81\055\uff81\056\uff81\001\002\000\022\017\131\034" +
    "\126\035\130\052\113\053\133\054\135\055\141\056\134" +
    "\001\002\000\010\020\uff97\032\uff97\033\uff97\001\002\000" +
    "\004\012\275\001\002\000\004\012\uffac\001\002\000\004" +
    "\012\uffab\001\002\000\026\003\270\017\131\020\uffa9\034" +
    "\126\035\130\052\113\053\133\054\135\055\141\056\134" +
    "\001\002\000\024\003\264\017\131\034\126\035\130\052" +
    "\113\053\133\054\135\055\141\056\134\001\002\000\004" +
    "\012\266\001\002\000\004\012\265\001\002\000\026\005" +
    "\uffba\006\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba" +
    "\031\uffba\051\uffba\052\uffba\001\002\000\026\005\uffbb\006" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\031\uffbb" +
    "\051\uffbb\052\uffbb\001\002\000\004\020\273\001\002\000" +
    "\004\020\271\001\002\000\004\012\272\001\002\000\026" +
    "\005\uffb8\006\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026" +
    "\uffb8\031\uffb8\051\uffb8\052\uffb8\001\002\000\004\012\274" +
    "\001\002\000\026\005\uffb9\006\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\026\uffb9\031\uffb9\051\uffb9\052\uffb9\001\002" +
    "\000\026\005\uffb7\006\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\031\uffb7\051\uffb7\052\uffb7\001\002\000\024" +
    "\005\uffcb\006\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb\026" +
    "\uffcb\051\uffcb\052\uffcb\001\002\000\024\005\uffae\006\300" +
    "\022\116\023\124\024\123\025\110\026\121\051\111\052" +
    "\113\001\002\000\026\005\uffad\006\uffad\022\uffad\023\uffad" +
    "\024\uffad\025\uffad\026\uffad\031\uffad\051\uffad\052\uffad\001" +
    "\002\000\024\003\303\017\131\034\126\035\130\052\113" +
    "\053\133\054\135\055\141\056\134\001\002\000\004\020" +
    "\310\001\002\000\004\020\305\001\002\000\004\020\uffa0" +
    "\001\002\000\022\005\uffae\022\116\023\124\024\123\025" +
    "\110\026\121\051\111\052\113\001\002\000\024\005\uffbc" +
    "\006\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\051" +
    "\uffbc\052\uffbc\001\002\000\026\005\uffb3\006\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\025\uffb3\026\uffb3\031\uffb3\051\uffb3\052" +
    "\uffb3\001\002\000\022\005\uffae\022\116\023\124\024\123" +
    "\025\110\026\121\051\111\052\113\001\002\000\024\005" +
    "\uffbd\006\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026\uffbd" +
    "\051\uffbd\052\uffbd\001\002\000\026\005\uffb4\006\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\031\uffb4\051\uffb4" +
    "\052\uffb4\001\002\000\004\052\113\001\002\000\010\013" +
    "\156\020\315\036\155\001\002\000\004\012\316\001\002" +
    "\000\026\005\uffb0\006\uffb0\022\uffb0\023\uffb0\024\uffb0\025" +
    "\uffb0\026\uffb0\031\uffb0\051\uffb0\052\uffb0\001\002\000\006" +
    "\005\321\052\012\001\002\000\004\012\uffe5\001\002\000" +
    "\026\005\uffe2\006\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2" +
    "\025\uffe2\026\uffe2\051\uffe2\052\uffe2\001\002\000\010\011" +
    "\uffc7\013\323\020\uffc7\001\002\000\004\014\324\001\002" +
    "\000\006\011\uffc6\020\uffc6\001\002\000\010\005\321\006" +
    "\uffde\052\012\001\002\000\026\005\uffe0\006\uffe0\021\uffe0" +
    "\022\uffe0\023\uffe0\024\uffe0\025\uffe0\026\uffe0\051\uffe0\052" +
    "\uffe0\001\002\000\006\011\334\012\uffe8\001\002\000\010" +
    "\011\uffea\012\uffea\013\332\001\002\000\006\011\uffe6\012" +
    "\uffe6\001\002\000\004\014\333\001\002\000\006\011\uffe9" +
    "\012\uffe9\001\002\000\004\052\330\001\002\000\006\011" +
    "\uffe7\012\uffe7\001\002\000\004\005\uffda\001\002\000\004" +
    "\005\uffd8\001\002\000\004\005\ufff8\001\002\000\010\006" +
    "\uffd6\021\uffd6\052\uffd6\001\002\000\010\006\343\021\065" +
    "\052\012\001\002\000\004\002\001\001\002\000\004\005" +
    "\ufffa\001\002\000\004\005\ufff9\001\002\000\006\011\354" +
    "\012\355\001\002\000\006\011\351\012\352\001\002\000" +
    "\006\011\uffec\012\uffec\001\002\000\004\052\330\001\002" +
    "\000\012\005\uffef\007\uffef\015\uffef\052\uffef\001\002\000" +
    "\006\011\uffed\012\uffed\001\002\000\004\052\330\001\002" +
    "\000\012\005\uffee\007\uffee\015\uffee\052\uffee\001\002\000" +
    "\006\011\uffeb\012\uffeb\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\355\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\051\005\001\001\000\022\003\015\005\014\007\017" +
    "\036\016\037\012\040\010\042\013\056\007\001\001\000" +
    "\002\001\001\000\006\043\346\044\347\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\344\005\014\007\017\036\016\037\012\040\010\042\013" +
    "\056\007\001\001\000\022\003\343\005\014\007\017\036" +
    "\016\037\012\040\010\042\013\056\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\337\005\014\007" +
    "\017\036\016\037\012\040\010\042\013\056\007\001\001" +
    "\000\002\001\001\000\004\056\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\072\031\001\001\000" +
    "\002\001\001\000\004\010\032\001\001\000\004\011\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\055\040\001\001\000\002" +
    "\001\001\000\004\073\042\001\001\000\004\012\044\001" +
    "\001\000\004\056\335\001\001\000\002\001\001\000\014" +
    "\006\046\013\051\046\053\047\054\056\047\001\001\000" +
    "\002\001\001\000\006\044\330\045\326\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\054" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\057\001\001\000\010\014\063\056\061\057\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\074\066\001" +
    "\001\000\002\001\001\000\004\053\070\001\001\000\012" +
    "\015\072\017\074\041\075\056\071\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\041\077\056\071\001\001\000" +
    "\002\001\001\000\006\041\101\056\071\001\001\000\002" +
    "\001\001\000\004\075\103\001\001\000\012\006\046\013" +
    "\104\046\105\056\047\001\001\000\002\001\001\000\004" +
    "\016\106\001\001\000\014\020\116\034\121\035\114\052" +
    "\113\076\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\067\255\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\052\131\060\136\061\126\062\135\063\141\064\137" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\052" +
    "\131\060\136\062\203\064\137\001\001\000\002\001\001" +
    "\000\004\056\177\001\001\000\014\052\131\060\136\061" +
    "\175\062\135\064\137\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\070" +
    "\152\001\001\000\004\071\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\052\131\064\147\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\052\131\060\153\064\137" +
    "\001\001\000\004\071\146\001\001\000\002\001\001\000" +
    "\004\077\170\001\001\000\020\021\161\022\160\052\131" +
    "\060\136\061\157\062\135\064\137\001\001\000\004\023" +
    "\163\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\164\001\001\000\002\001\001\000" +
    "\014\052\131\060\136\061\166\062\135\064\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\052\131\060" +
    "\136\061\171\062\135\064\137\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\052\131\060\136\061\201\062\135\064\137\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\070\152\001\001" +
    "\000\014\052\131\060\136\061\205\062\135\064\137\001" +
    "\001\000\004\066\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\025\215\030\220\033\216\052\131\060\136" +
    "\061\214\062\135\064\137\001\001\000\004\065\253\001" +
    "\001\000\002\001\001\000\004\031\233\001\001\000\002" +
    "\001\001\000\004\026\221\001\001\000\004\027\222\001" +
    "\001\000\002\001\001\000\020\030\224\033\216\052\131" +
    "\060\136\061\214\062\135\064\137\001\001\000\002\001" +
    "\001\000\014\020\226\034\227\035\114\052\113\076\111" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\034" +
    "\232\035\231\052\113\076\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\032\235\001\001\000\016\033" +
    "\236\052\131\060\136\061\214\062\135\064\137\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\020\240\034" +
    "\241\035\114\052\113\076\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\244\035\243\052\113\076" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\052\131" +
    "\060\136\061\254\062\135\064\137\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\021\266\022\160\052\131\060\136\061\157\062" +
    "\135\064\137\001\001\000\014\052\131\060\136\061\262" +
    "\062\135\064\137\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\276\001\001\000\014\020\116\034\121\035\114\052" +
    "\113\076\111\001\001\000\002\001\001\000\024\025\303" +
    "\030\220\033\216\050\301\052\131\060\136\061\214\062" +
    "\135\064\137\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\306\035\305\052\113\076" +
    "\111\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\034\311\035\310\052\113\076\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\052\313\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\006" +
    "\317\056\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\006\317\056\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\334\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\341\001\001\000\010\014\063\056\061" +
    "\057\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\352\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\355\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	MyTab.init(); // Universe scope

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
	{
		log.info(s.toString() + " " + s.value.toString());
	}
	return s;

    }


	int printCallCount = 0;
	
	int globalVarCount = 0;
	int mainVarCount = 0;
	int globalConstVarCount = 0;
	int globalArrayCount = 0;
	
	int globalFunctionCount = 0;
	int blockCount = 0;
	int funcCallCount = 0;
	int funcCallArgCount = 0;
	
	int classCount = 0;
	int methodCount = 0;
	int classMemberCount = 0;
	
	boolean mainVarFlag = false;
	boolean inClassFlag = false;
	boolean inMethodFlag = false;
	boolean inWhileLoop = false;
	
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Sintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }
	
	public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
	
	public void dump(){
		MyTab.dump(new MySymbolTableVisitor());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currMethod = null;
	Obj currClass = null;
	
	int currMethVarCnt = 0;
	
	Struct currType;
	
	boolean returnFound = false;
	
	public static Scope GLOBAL_SCOPE;
	
	public static boolean scopeIsGlobal()
	{
		return (MyTab.currentScope() == GLOBAL_SCOPE);
	}

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Mulop ::= PERCENT 
            {
              Integer RESULT =null;
		 RESULT = Code.rem; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Mulop ::= DIV 
            {
              Integer RESULT =null;
		 RESULT = Code.div; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Mulop ::= MUL 
            {
              Integer RESULT =null;
		 RESULT = Code.mul; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Addop ::= MINUS 
            {
              Integer RESULT =null;
		 RESULT = Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Addop ::= ADD 
            {
              Integer RESULT =null;
		 RESULT = Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Relop ::= LEQU 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Relop ::= LSS 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= GEQU 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= GRT 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= NEQU 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= EQU 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Designator ::= Designator OSBRAC error CSBRAC 
            {
              Obj RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.log.debug("Uspesan oporavak od greske u IZRAZU INDEKSIRANJA NIZA na liniji " + errleft + ". Siguran simbol: ']'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Designator ::= Designator OSBRAC NT$5 Expr CSBRAC 
            {
              Obj RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Obj) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj arr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
					if(e != MyTab.intType)
						parser.report_error("Semanticka greska na liniji " + arrleft + ": izraz indeksiranja niza \'" + arr.getName() + "\' nije tipa int!", null);
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$5 ::= 
            {
              Obj RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj arr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;

					RESULT = MyTab.noObj;
					if(arr == MyTab.noObj)
						parser.report_error("Semanticka greska na liniji " + arrleft + ": niz \'" + arr.getName() + "\' nije deklarisana!", null);
					else
					{
						if(arr.getType().getKind() != Struct.Array)
							parser.report_error("Semanticka greska na liniji " + arrleft + ":\'" + arr.getName() + "\' nije niz!", null);
						else
						{
							Code.load(arr);
							
							RESULT = new Obj(Obj.Elem, "", arr.getType().getElemType());
						}
					}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$5",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Designator ::= Designator POINT IDENT 
            {
              Obj RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj c = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int memberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int memberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String member = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj clas;
					if(c.getName().equals("this")) 
						clas = currClass;
					else
						clas = c;
					
					RESULT = MyTab.noObj;
					
					if(clas == MyTab.noObj)
						parser.report_error("Semanticka greska na liniji " + memberleft + ": klasa \'" + clas.getName() + "\' nije deklarisana!", null);
					else
					{
						if(clas.getType().getKind() != Struct.Class)
							parser.report_error("Semanticka greska na liniji " + memberleft + ":\'" + clas.getName() + "\' nije unutrasnja klasa!", null);
						else
						{
							Code.load(clas);
							
							boolean foundMember = false;
							for(Obj currMember : clas.getType().getMembers())
							{
								if(currMember.getName().equals(member)) 
								{
									RESULT = currMember;
									foundMember = true;
									break;
								}
							}
							if(!foundMember)
								parser.report_error("Semanticka greska na liniji " + memberleft + ":\'" + member + "\' nije clan klase \'" + clas.getName() + "\'!", null);
						}
					}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj obj = MyTab.find(name);
					if (obj == MyTab.noObj)
						parser.report_info("Greska na liniji " + nameleft + ": ime \'" + name + "\' nije deklarisano!", null);
					RESULT = obj;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Factor ::= OBRAC Expr CBRAC 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				RESULT = MyTab.noType;
				if(t.getKind() != Struct.Class)
					parser.report_error("Semanticka greska na liniji " + tleft + ": navedeni tip nije unutrasnja klasa!", null);
				else
				{
					if(t.equals(MyTab.intType) || t.equals(MyTab.charType) || t.equals(MyTab.boolType) /*|| t.equals(MyTab.stringType)*/)
					{
						Code.put(Code.new_);
					}
					RESULT = t; 
				}
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Factor ::= NEW Type OSBRAC Expr CSBRAC 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				RESULT = MyTab.noType;
				if(te != MyTab.intType)
					parser.report_error("Semanticka greska na liniji " + tleft + ": izraz nije tipa int!", null);
				else
				{
					if(t.equals(MyTab.intType) || t.equals(MyTab.charType) || t.equals(MyTab.boolType) /*|| t.equals(MyTab.stringType)*/)
					{
						Code.put(Code.newarray);
					}
					RESULT = new Struct(Struct.Array, t);
				}
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Factor ::= STR_CONST 
            {
              Struct RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj c = MyTab.insert(Obj.Con, "", MyTab.stringType);
				Code.loadConst(str.length());
				Code.put(Code.newarray);
		   		Code.put(0);
				//c.setAdr(Code.get(Code.))
				RESULT = MyTab.stringType;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= BOOL_CONST 
            {
              Struct RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c = MyTab.insert(Obj.Con, "", MyTab.boolType);
				c.setAdr(b ? 1 : 0);
				Code.load(c);
				RESULT = MyTab.boolType; 
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= CHAR_CONST 
            {
              Struct RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj c = MyTab.insert(Obj.Con, "", MyTab.charType);
				c.setAdr(ch.charValue());
				Code.load(c);
				RESULT = MyTab.charType; 
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj c = MyTab.insert(Obj.Con, "", MyTab.intType);
				c.setAdr(i.intValue());
				Code.load(c);
				RESULT = MyTab.intType; 
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= Designator OBRAC ActParsOp CBRAC 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				RESULT = MyTab.noType;
				if (Obj.Meth == func.getKind())
				{					
					if(func.getType() == MyTab.noType)
						parser.report_error("Semanticka greska na liniji " + funcleft + ": poziv funkcije \'" + func.getName() + "()\' sa povratnim tipom void u izrazu", null);
					else
					{
						if (parser.mainVarFlag) parser.funcCallCount++;
						parser.report_info("Pronadjen poziv funkcije \'" + func.getName() + "()\' na liniji " + funcleft, null);
					
						// pcRel adr
						int dstAdr = func.getAdr() - Code.pc;
						Code.put(Code.call);
						Code.put2(dstAdr);
						RESULT = func.getType();
					}
				}
				else
					parser.report_error("Greska na liniji " + funcleft + ": \'" + func.getName() + "\' nije funkcija!", null);
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = d.getType();
				Code.load(d);
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tf = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = MyTab.noType;
			if(t.compatibleWith(tf) && t == MyTab.intType)
			{
				Code.put(op);
				RESULT = t;
			}
			else
				parser.report_error("Semanticka greska na liniji " + tleft + ": nekompatibilni tipovi u Mul izrazu", null);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // ExprAddopTerm ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprAddopTerm",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ExprAddopTerm ::= ExprAddopTerm Addop Term 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						RESULT = MyTab.noType;
						if(t.compatibleWith(te))
						{
							if(t == MyTab.intType || (t == MyTab.stringType && op == Code.add))
							{
								Code.put(op);
								RESULT = t;
							}
							else
								parser.report_error("Semanticka greska na liniji " + tleft + ": Add izraz sadrzi nedozvoljene tipove", null);
						}
						else
							parser.report_error("Semanticka greska na liniji " + tleft + ": nekompatibilni tipovi u Add izrazu", null);
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprAddopTerm",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Expr ::= MINUS ExprAddopTerm 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = MyTab.noType;
			if(te == MyTab.intType)
			{
				Code.put(Code.neg);
				RESULT = te;
			}
			else
				parser.report_error("Semanticka greska na liniji " + teleft + ": ne-int tip uz unarni operator -", null);
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Expr ::= ExprAddopTerm 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = te;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int te1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int te1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int te2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int te2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(te1.compatibleWith(te2))
				{
					if(te1.isRefType() || te2.isRefType())
					{
						if(!op.booleanValue())
						{
							parser.report_error("Semanticka greska na liniji " + te1left + ": nedozvoljeni relacioni operatori uz promenljive tipa klase ili niza", null);
						}
						else
						{
							// OK
						}
					}
					//RESULT = t;
				}
				else
				{
					parser.report_error("Semanticka greska na liniji " + te1left + ": nekompatibilni tipovi u CondFact izrazu", null);
					//RESULT = MyTab.noType;
				}
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // CondFactSep ::= AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactSep",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CondFactSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactSepList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CondFactSepList ::= CondFactSepList CondFactSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactSepList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CondTerm ::= CondFact CondFactSepList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CondTermSep ::= OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermSep",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CondTermSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermSepList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CondTermSepList ::= CondTermSepList CondTermSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermSepList",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Condition ::= CondTerm CondTermSepList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // WhileCondition ::= Condition 
            {
              Object RESULT =null;
		 parser.inWhileLoop = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("WhileCondition",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ExprSep ::= COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprSep",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ExprSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprSepList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ExprSepList ::= ExprSepList ExprSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprSepList",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ActPars ::= Expr ExprSepList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // NumSepOp ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumSepOp",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NumSepOp ::= COMMA NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = n; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumSepOp",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExprOp ::= 
            {
              Struct RESULT =null;
		 RESULT = MyTab.noType; /* void */ 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExprOp ::= Expr 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprOp",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ActParsOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOp",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ActParsOp ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOp",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IncDec ::= DEC 
            {
              Integer RESULT =null;
		 RESULT = Code.sub; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncDec",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IncDec ::= INC 
            {
              Integer RESULT =null;
		 RESULT = Code.add; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IncDec",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Matched ::= NT$4 OCBRAC StatementList CCBRAC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				MyTab.closeScope();
				parser.blockCount++;
              
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$4 ::= 
            {
              Object RESULT =null;
 MyTab.openScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$4",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Matched ::= PRINT OBRAC Expr NumSepOp CBRAC SC 
            {
              Object RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(te != MyTab.intType && te != MyTab.charType && te != MyTab.boolType && te != MyTab.stringType)
					parser.report_error("Semanticka greska na liniji " + teleft + ": neadekvatan tip operanda instrukcije \'print\'", null);
				else
				{
					Code.loadConst(n);
					if(te == MyTab.intType)
					{
						Code.put(Code.print);
					}
					else if(te == MyTab.charType)
					{
						Code.put(Code.bprint);
					}
					else if(te == MyTab.boolType)
					{
						Code.put(Code.print);
					}
					else if(te == MyTab.stringType)
					{
						
					}
					
					parser.printCallCount++; /// broji pozive print funkcije (TODO izbaciti)
					if (parser.mainVarFlag) parser.funcCallCount++;
					parser.report_info("Pronadjen poziv funkcije \'print()\' na liniji " + teleft, null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Matched ::= READ OBRAC Designator CBRAC SC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					parser.report_error("Semanticka greska na liniji " + dleft + ": citanje neadekvatne promenljive", null);
				else
					if(d.getType() != MyTab.intType && d.getType() != MyTab.charType && d.getType() != MyTab.boolType && d.getType() != MyTab.stringType)
						parser.report_error("Semanticka greska na liniji " + dleft + ": neadekvatan tip operanda instrukcije \'read\'", null);
					else
					{
						if(d.getType() == MyTab.intType)
						{
							Code.put(Code.read);
						}
						else if(d.getType() == MyTab.charType)
						{
							Code.put(Code.bread);
						}
				  	 	Code.store(d);
						if (parser.mainVarFlag) parser.funcCallCount++;
						parser.report_info("Pronadjen poziv funkcije \'read()\' na liniji " + dleft, null);
					}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Matched ::= RETURN ExprOp SC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				returnFound = true;
				Struct currMethodType = currMethod.getType();
				if(!currMethodType.compatibleWith(t))
				{
					parser.report_error("Semanticka greska na liniji " + tleft + ": tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije \'" + currMethod.getName() + "()\'", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Matched ::= BREAK SC 
            {
              Object RESULT =null;
		
				if(!parser.inWhileLoop)
					parser.report_error("Semanticka greska: koriscenje iskaza break van while ciklusa", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Matched ::= WHILE OBRAC error CBRAC Matched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU WHILE konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Matched ::= WHILE OBRAC WhileCondition CBRAC Matched 
            {
              Object RESULT =null;
		 parser.inWhileLoop = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Matched ::= IF OBRAC error CBRAC Matched ELSE Matched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU IF konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Matched ::= IF OBRAC Condition CBRAC Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Matched ::= Designator IncDec SC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Integer op = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					parser.report_error("Semanticka greska na liniji " + dleft + ": dodela vrednosti u neadekvatnu promenljivu", null);
				else
					if(d.getType() != MyTab.intType)
					{
						String operator = (op == Code.add)? "++" : "--";
						parser.report_error("Semanticka greska na liniji " + dleft + ": ne-int tip uz operator " + operator, null);
					}
					else
					{
						Code.load(d);
				  	 	Code.put(Code.const_1);
				  	 	Code.put(op);
				  		Code.store(d);
					}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= Designator OBRAC error CBRAC SC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LISTI PARAMETARA ZA POZIV METODE OBJEKTA na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= Designator OBRAC ActParsOp CBRAC SC 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				if (Obj.Meth == func.getKind()){
					if (parser.mainVarFlag) parser.funcCallCount++;
					parser.report_info("Pronadjen poziv funkcije \'" + func.getName() + "()\' na liniji " + funcleft, null);
					RESULT = func.getType();
					
					// pcRel adr
					int dstAdr = func.getAdr() - Code.pc;
					Code.put(Code.call);
					Code.put2(dstAdr);
					if(func.getType() != MyTab.noType)
						Code.put(Code.pop);
				}
				else{
					parser.report_error("Greska na liniji " + funcleft + ": \'" + func.getName() + "\' nije funkcija!", null);
					RESULT = MyTab.noType;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= Designator ASSIGN error SC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.log.debug("Uspesan oporavak od greske pri DODELI VREDNOSTI na liniji " + errleft + ". Siguran simbol: ';'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= Designator ASSIGN Expr SC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(d != null)
				{
					if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
						parser.report_error("Semanticka greska na liniji " + dleft + ": dodela vrednosti u neadekvatnu promenljivu", null);
					else
						if(!e.assignableTo(d.getType()))
							parser.report_error("Semanticka greska na liniji " + dleft + ": nekompatibilni tipovi u dodeli vrednosti", null);
						else
						{
							Code.store(d);
						}
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Unmatched ::= WHILE OBRAC error CBRAC Unmatched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU WHILE konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Unmatched ::= WHILE OBRAC WhileCondition CBRAC Unmatched 
            {
              Object RESULT =null;
		 parser.inWhileLoop = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Unmatched ::= IF OBRAC error CBRAC Matched ELSE Unmatched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU IF konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Unmatched ::= IF OBRAC Condition CBRAC Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Unmatched ::= IF OBRAC error CBRAC Statement 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU IF konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Unmatched ::= IF OBRAC Condition CBRAC Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj typeNode = MyTab.find(typeName);
	if (typeNode == MyTab.noObj)
	{
		parser.report_error("Nije pronadjen tip " + typeName + " u tabeli simbola", null);
		currType = MyTab.noType;
		RESULT = MyTab.noType;
	}
	else{
		if (typeNode.getKind() == Obj.Type)
		{
			currType = typeNode.getType();
			RESULT = typeNode.getType();
		}
		else
		{
			parser.report_error("Greska na liniji " + typeNameleft + ": ime \'" + typeName + "\' ne predstavlja tip", null);
			currType = MyTab.noType;
			RESULT = MyTab.noType;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // insertThis ::= 
            {
              Obj RESULT =null;
		 if(parser.inClassFlag) MyTab.insert(Obj.Var, "this", currClass.getType()); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("insertThis",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FormPar ::= Type IDENT OSBRAC CSBRAC 
            {
              Object RESULT =null;
		int formParNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int formParNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String formParName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				MyTab.insert(Obj.Var, formParName, new Struct(Struct.Array, currType));
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormPar ::= Type IDENT 
            {
              Object RESULT =null;
		int formParNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int formParNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String formParName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				MyTab.insert(Obj.Var, formParName, currType);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormPars ::= error COMMA FormPar 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI FORMALNIH PARAMETARA FUNKCIJE na liniji " + errleft + ". Siguran simbol: ','"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormPars ::= FormPar 
            {
              Object RESULT =null;
		 parser.funcCallArgCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormPars ::= FormPars COMMA FormPar 
            {
              Object RESULT =null;
		 parser.funcCallArgCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormParsOp ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI FORMALNIH PARAMETARA FUNKCIJE na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOp",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormParsOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOp",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParsOp ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOp",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MethodType ::= VOID 
            {
              Struct RESULT =null;
		 RESULT =  MyTab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodType ::= Type 
            {
              Struct RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT =  retType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodDecl ::= MethodType IDENT NT$2 OBRAC insertThis FormParsOp CBRAC NT$3 LocalVarDeclListWOCBRAC StatementList CCBRAC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		 
					if(!returnFound && retType != MyTab.noType) 
						parser.report_error("Semanticka greska na liniji " + methodNameleft + ": funkcija \'" + methodName + "()\' nema return iskaz", null);
					
					Code.put(Code.exit);
					Code.put(Code.return_);
					
					MyTab.chainLocalSymbols(currMethod);
					MyTab.closeScope();
					
					parser.inMethodFlag = false;
					returnFound = false;
					currMethod = null;
					
					if (methodName.equals("main")) parser.mainVarFlag = false;
					if (scopeIsGlobal()) parser.globalFunctionCount++;
					else parser.methodCount++;
					//parser.blockCount++; nije blok NAREDBI
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-10)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$3 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
 
					currMethod.setAdr(Code.pc);
					if (methodName.equals("main"))
					{						
						parser.mainVarFlag = true;
						Code.mainPc = currMethod.getAdr();
					}
					Code.put(Code.enter);
					Code.put(currMethod.getLevel());
					Code.put(MyTab.currentScope().getnVars());
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$3",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
					currMethod = MyTab.insert(Obj.Meth, methodName, retType);
					if(parser.inClassFlag)
						parser.report_info("Obradjuje se METODA \'" + methodName + "()\' KLASE \'" + currClass.getName() + "\' na liniji " + methodNameleft, null);
					else
						parser.report_info("Obradjuje se GLOBALNA FUNKCIJA \'" + methodName + "()\' na liniji " + methodNameleft, null);
					MyTab.openScope();
					parser.inMethodFlag = true;
					currMethVarCnt = 0;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // setClassMembers ::= 
            {
              Obj RESULT =null;
		
						MyTab.chainLocalSymbols(currClass.getType());
						if(MyTab.currentScope().getnVars() > 65536)
							parser.report_error("Greska: klasa \'" + currClass.getName() + "\' ima vise od 65536 polja!", null);
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("setClassMembers",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExtTypeOp ::= EXTENDS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI PROSIRENJA NATKLASE na liniji " + errleft + ". Siguran simbol: '{'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtTypeOp",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExtTypeOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtTypeOp",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ExtTypeOp ::= EXTENDS Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(t.getKind() != Struct.Class)
						parser.report_error("Semanticka greska na liniji " + tleft + ": navedeni tip nije unutrasnja klasa!", null);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtTypeOp",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ClassDecl ::= CLASS IDENT NT$1 ExtTypeOp OCBRAC LocalVarDeclMethodDecWErrorDetOp CCBRAC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 
						MyTab.chainLocalSymbols(currClass.getType());
						MyTab.closeScope();
												
						currClass = null;
						
						parser.inClassFlag = false;
						parser.classCount++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$1 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						///log.info("Deklarisana klasa " + className + " na liniji " + classNameleft);
						///inside_class = true;
						currClass = MyTab.insert(Obj.Type, className, new Struct(Struct.Class));
						MyTab.openScope();
						parser.inClassFlag = true;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LocalVarDeclMethodDecWErrorDetOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclMethodDecWErrorDetOp",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LocalVarDeclMethodDecWErrorDetOp ::= LocalVarDeclList SC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclMethodDecWErrorDetOp",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LocalVarDeclMethodDecWErrorDetOp ::= LocalVarDeclListWOCBRAC setClassMembers MethodDeclList CCBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclMethodDecWErrorDetOp",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LocalVarDeclListWOCBRAC ::= error OCBRAC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
								if(parser.inClassFlag)
									parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI POLJA UNUTRASNJE KLASE na liniji " + errleft + ". Siguran simbol: '{'"); 
								else
									parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI LOKALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: '{'"); 
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListWOCBRAC",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LocalVarDeclListWOCBRAC ::= OCBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListWOCBRAC",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LocalVarDeclListWOCBRAC ::= LocalVarDeclList SC OCBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListWOCBRAC",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI LOKALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ';'");
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LocalVarDeclList ::= LocalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LocalVarDeclList ::= LocalVarDeclList SC LocalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LocalVarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LocalVarList ::= LocalVarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LocalVarDecl ::= Type LocalVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Var ::= IDENT OSBRAC CSBRAC 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			Obj obj = MyTab.find(varName);
			if(obj != MyTab.noObj && MyTab.currentScope().findSymbol(varName) != null)
			{
				parser.report_error("Semanticka greska na liniji " + varNameleft + ": identifikator \'" + varName + "\' je vec deklarisana u trenutnom opsegu!", null);
			}
			else
			{
				if(parser.inClassFlag && !parser.inMethodFlag)
				{
					MyTab.insert(Obj.Fld, varName, new Struct(Struct.Array, currType));
					if (parser.inClassFlag) parser.classMemberCount++; // broji polja unutrasnjih klasa(nizove)
					parser.report_info("Deklarisano POLJE \'" + varName + "\' KLASE \'" + currClass.getName() + "\' na liniji " + varNameleft, null);
				}
				else
				{
					MyTab.insert(Obj.Var, varName, new Struct(Struct.Array, currType));
					String scope = scopeIsGlobal()? "GLOBALNA" : "LOKALNA";
					parser.report_info("Deklarisana " + scope + " PROMENLJIVA \'" + varName + "\' na liniji " + varNameleft, null);
					if(parser.inMethodFlag)
					{						
						currMethVarCnt++;
						if (currMethVarCnt > 256)
						parser.report_error("Greska: deklariano vise od 256 lokalnih promenljivih!", null);
					}
				}
				
				if (scopeIsGlobal())
				{
					parser.globalVarCount++;	// broji globalne promenljive(nizove)
					if (parser.globalVarCount > 65536)
						parser.report_error("Greska: deklariano vise od 65536 globalnih promenljivih!", null);
					parser.globalArrayCount++; 	// broji globalne nizove
				}
				if (parser.mainVarFlag) parser.mainVarCount++;  // broji lokalne(main) promenljive(nizove)
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Var ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			Obj obj = MyTab.find(varName);
			if(obj != MyTab.noObj && MyTab.currentScope().findSymbol(varName) != null)
			{
				parser.report_error("Semanticka greska na liniji " + varNameleft + ": identifikator \'" + varName + "\' je vec deklarisana u trenutnom opsegu!", null);
			}
			else
			{
				if(parser.inClassFlag && !parser.inMethodFlag)
				{
					MyTab.insert(Obj.Fld, varName, currType);
					if (parser.inClassFlag) parser.classMemberCount++; // broji polja unutrasnjih klasa koje nisu niz
					parser.report_info("Deklarisano POLJE \'" + varName + "\' KLASE \'" + currClass.getName() + "\' na liniji " + varNameleft, null);
				}
				else
				{
					MyTab.insert(Obj.Var, varName, currType);
					String scope = scopeIsGlobal()? "GLOBALNA" : "LOKALNA";
					parser.report_info("Deklarisana " + scope + " PROMENLJIVA \'" + varName + "\' na liniji " + varNameleft, null);
					if(parser.inMethodFlag)
					{						
						currMethVarCnt++;
						if (currMethVarCnt > 256)
						parser.report_error("Greska: deklariano vise od 256 lokalnih promenljivih!", null);
					}
				}
				
				if (scopeIsGlobal())
				{
					parser.globalVarCount++;  // broji globalne promenljive koje nisu niz
					if (parser.globalVarCount > 65536)
						parser.report_error("Greska: deklariano vise od 65536 globalnih promenljivih!", null);
				}
				if (parser.mainVarFlag) parser.mainVarCount++; // broji lokalne(main) promenljive koje nisu niz
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarList ::= error COMMA Var 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
				parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI GLOBALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ','");
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type error SC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI GLOBALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ';'");
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VarDecl ::= Type VarList SC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeValSep ::= COMMA IDENT ASSIGN TypeVal 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
					if(!currType.equals(MyTab.intType) && !currType.equals(MyTab.charType) && !currType.equals(MyTab.boolType) && !currType.equals(MyTab.stringType))
						parser.report_error("Semanticka greska na liniji " + constNameleft + ": tip konstante \'" + constName + "\' nije adekvatan", null);
					else
					{
						MyTab.insert(Obj.Con, constName, currType);
						parser.globalConstVarCount++; // broji ostale konstante posle prve (int ...,cnt2,cnt3,...) (konstane mogu biti samo globalne pa se to ne proverava)
					}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeValSep",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeValSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeValSepList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeValSepList ::= TypeValSepList TypeValSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeValSepList",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeVal ::= BOOL_CONST 
            {
              Obj RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				Obj c = new Obj(Obj.Con, "", MyTab.boolType);
				c.setAdr(b ? 1 : 0);
				RESULT = c;
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeVal ::= CHAR_CONST 
            {
              Obj RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj c = new Obj(Obj.Con, "", MyTab.charType);
				c.setAdr(ch.charValue());
				RESULT = c;
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeVal ::= NUMBER 
            {
              Obj RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				Obj c = new Obj(Obj.Con, "", MyTab.intType);
				c.setAdr(i.intValue());
				RESULT = c;
		    
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type IDENT ASSIGN TypeVal NT$0 TypeValSepList SC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj a = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj a = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
					Obj obj = MyTab.find(constName);
					if(obj != MyTab.noObj && MyTab.currentScope().findSymbol(constName) != null)
					{
						parser.report_error("Semanticka greska na liniji " + constNameleft + ": identifikator \'" + constName + "\' je vec deklarisana u trenutnom opsegu!", null);
					}
					else
					{
						if(!t.equals(MyTab.intType) && !t.equals(MyTab.charType) && !t.equals(MyTab.boolType) && !t.equals(MyTab.stringType))
							parser.report_error("Semanticka greska na liniji " + tleft + ": tip konstante \'" + constName + "\' nije adekvatan", null);
						else
						{
							obj = MyTab.insert(Obj.Con, constName, t);
							obj.setAdr(a.getAdr());
							
							parser.globalConstVarCount++; // broji prvu konstantu posle tipa (const int cnt1,...) (konstane mogu biti samo globalne)
						}
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl_List ::= ConstDecl Class_Var_Const_DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl_List",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl_List ::= VarDecl Class_Var_Const_DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl_List",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDecl_List ::= ClassDecl Class_Var_Const_DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl_List",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Class_Var_Const_DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Class_Var_Const_DeclList ::= ConstDecl_List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Class_Var_Const_DeclList ::= VarDecl_List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Class_Var_Const_DeclList ::= ClassDecl_List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = MyTab.insert(Obj.Prog, progName, MyTab.noType);
	MyTab.openScope();
	GLOBAL_SCOPE = MyTab.currentScope();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgramName Class_Var_Const_DeclList OCBRAC MethodDeclList CCBRAC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	Code.dataSize = MyTab.currentScope().getnVars();
	
	MyTab.chainLocalSymbols(p);
	MyTab.closeScope();
	
	if(Code.pc > 8*1024)
		parser.report_error("Greska: izvorni kod veci od 8KB!", null);
	
	// Ispis broja odredjenih elemenata
	parser.log.info("==================SINTAKSNA ANALIZA==================");
	parser.log.info("Broj globalnih promenljivih = " + parser.globalVarCount);
	parser.log.info("Broj lokalnih promenljivih u Main funkciji = " + parser.mainVarCount);
	parser.log.info("Broj globalnih konstanti = " + parser.globalConstVarCount);
	parser.log.info("Broj globalnih nizova = " + parser.globalArrayCount);
	parser.log.info("----------------------------------------------------");
	parser.log.info("Broj globalnih funkcija = " + parser.globalFunctionCount);
	parser.log.info("Broj blokova naredbi = " + parser.blockCount);
	parser.log.info("Broj poziva funkcija = " + parser.funcCallCount);
	parser.log.info("Broj deklarisanih formalnih argumenata funkcija = " + parser.funcCallArgCount);
	parser.log.info("----------------------------------------------------");
	parser.log.info("Broj unutrasnjih klasa = " + parser.classCount);
	parser.log.info("Broj metoda unutrasnjih klasa = " + parser.methodCount);
	parser.log.info("Broj polja unutrasnjih klasa = " + parser.classMemberCount);

	parser.dump();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

