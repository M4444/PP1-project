package rs.ac.bg.etf.pp1.sm120554d;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;

import java_cup.runtime.Symbol;

import org.apache.log4j.Logger;
import org.apache.log4j.xml.DOMConfigurator;

import rs.ac.bg.etf.pp1.sm120554d.util.Log4JUtils;

public class MJParserTest {
	
	// logger
	/*static {
		DOMConfigurator.configure(Log4JUtils.instance().findLoggerConfigFile());
		Log4JUtils.instance().prepareLogFile(Logger.getRootLogger());
	}*/
	
	private static String[] test= {
								"test/program.mj",				// 0
								"test/test_count.mj",			// 1 CNT
								"test/test_error_recovery.mj"	// 2 ERR
							};
	
	public static void main(String[] args) throws Exception {
		Logger log = Logger.getLogger(MJParserTest.class);
		
		Reader br = null;
		try {
			//File sourceCode = new File(test[0]);
			File sourceCode = new File(args[2]);
			log.info("Compiling source file: " + sourceCode.getAbsolutePath());
			
			br = new BufferedReader(new FileReader(sourceCode));
			Yylex lexer = new Yylex(br);
			
			MJParser p = new MJParser(lexer);
	        Symbol s = p.parse();  //pocetak parsiranja
	        
	        log.info("Print calls = " + p.printCallCount + '\n');
	        
	        log.info("Global variable count = " + p.globalVarCount);
	        log.info("Main variable count = " + p.mainVarCount);
	        log.info("Global constant count = " + p.globalConstVarCount);
	        log.info("Global array count = " + p.globalArrayCount + "\n");
	        
	        log.info("Global function count = " + p.globalFunctionCount);
	        log.info("Block count = " + p.blockCount);
	        log.info("Function call count = " + p.funcCallCount);
	        log.info("Function call argument count = " + p.funcCallArgCount);
	        
		} 
		finally {
			if (br != null) try { br.close(); } catch (IOException e1) { log.error(e1.getMessage(), e1); }
		}
	}

}
