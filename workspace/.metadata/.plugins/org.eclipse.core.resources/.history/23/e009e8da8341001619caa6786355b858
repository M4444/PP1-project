
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jul 04 02:25:33 CEST 2016
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sm120554d;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.Tab;
import rs.etf.pp1.symboltable.concepts.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jul 04 02:25:33 CEST 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\213\000\002\002\010\000\002\002\004\000\002\071" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\002\000\002\061\004\000\002\062\004\000" +
    "\002\063\004\000\002\100\002\000\002\007\012\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\004\000\002\011\002\000\002\012\006" +
    "\000\002\065\005\000\002\065\005\000\002\066\005\000" +
    "\002\066\003\000\002\067\003\000\002\067\005\000\002" +
    "\006\005\000\002\006\005\000\002\070\005\000\002\070" +
    "\003\000\002\070\005\000\002\015\004\000\002\015\002" +
    "\000\002\015\003\000\002\013\004\000\002\013\002\000" +
    "\002\101\002\000\002\005\011\000\002\014\004\000\002" +
    "\014\002\000\002\016\005\000\002\016\002\000\002\004" +
    "\004\000\002\004\002\000\002\102\002\000\002\017\014" +
    "\000\002\074\003\000\002\074\003\000\002\020\003\000" +
    "\002\020\002\000\002\020\003\000\002\021\004\000\002" +
    "\021\002\000\002\022\005\000\002\022\003\000\002\022" +
    "\005\000\002\064\005\000\002\073\003\000\002\023\003" +
    "\000\002\023\003\000\002\060\007\000\002\060\007\000" +
    "\002\060\011\000\002\060\011\000\002\060\007\000\002" +
    "\060\007\000\002\060\005\000\002\057\005\000\002\057" +
    "\011\000\002\057\011\000\002\057\007\000\002\057\007" +
    "\000\002\057\004\000\002\057\005\000\002\057\007\000" +
    "\002\057\010\000\002\024\004\000\002\024\004\000\002" +
    "\024\005\000\002\024\005\000\002\024\003\000\002\024" +
    "\003\000\002\027\003\000\002\027\002\000\002\025\003" +
    "\000\002\025\002\000\002\026\004\000\002\026\002\000" +
    "\002\030\004\000\002\031\004\000\002\031\002\000\002" +
    "\032\004\000\002\033\004\000\002\034\004\000\002\034" +
    "\002\000\002\035\004\000\002\036\004\000\002\037\004" +
    "\000\002\037\002\000\002\040\004\000\002\041\004\000" +
    "\002\042\004\000\002\042\002\000\002\076\005\000\002" +
    "\043\003\000\002\043\002\000\002\044\004\000\002\044" +
    "\002\000\002\045\004\000\002\075\004\000\002\046\004" +
    "\000\002\046\002\000\002\047\004\000\002\077\004\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\005\000\002\077\005\000\002\050\005\000\002\050" +
    "\002\000\002\051\005\000\002\051\002\000\002\072\004" +
    "\000\002\052\004\000\002\052\002\000\002\053\004\000" +
    "\002\053\005\000\002\053\005\000\002\054\003\000\002" +
    "\054\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\055\003\000\002\055\003" +
    "\000\002\056\003\000\002\056\003\000\002\056\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\004\005\001\002\000\004\002\352\001" +
    "\002\000\004\053\007\001\002\000\012\005\ufffb\007\022" +
    "\015\021\053\012\001\002\000\012\005\uffff\007\uffff\015" +
    "\uffff\053\uffff\001\002\000\006\003\343\053\320\001\002" +
    "\000\004\005\ufffc\001\002\000\054\003\uffc9\005\uffc9\011" +
    "\uffc9\012\uffc9\013\uffc9\014\uffc9\020\uffc9\032\uffc9\033\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\045" +
    "\uffc9\046\uffc9\047\uffc9\050\uffc9\051\uffc9\053\uffc9\001\002" +
    "\000\004\005\ufffd\001\002\000\012\005\ufffb\007\022\015" +
    "\021\053\012\001\002\000\012\005\ufffb\007\022\015\021" +
    "\053\012\001\002\000\004\005\336\001\002\000\004\005" +
    "\ufffe\001\002\000\012\005\ufffb\007\022\015\021\053\012" +
    "\001\002\000\004\053\043\001\002\000\004\053\012\001" +
    "\002\000\004\053\024\001\002\000\004\010\025\001\002" +
    "\000\012\054\027\055\026\056\032\057\030\001\002\000" +
    "\006\011\ufff3\012\ufff3\001\002\000\006\011\ufff5\012\ufff5" +
    "\001\002\000\006\011\ufff2\012\ufff2\001\002\000\006\011" +
    "\ufff7\012\ufff7\001\002\000\006\011\ufff4\012\ufff4\001\002" +
    "\000\006\011\ufff0\012\ufff0\001\002\000\006\011\035\012" +
    "\037\001\002\000\004\053\040\001\002\000\006\011\ufff1" +
    "\012\ufff1\001\002\000\012\005\ufff6\007\ufff6\015\ufff6\053" +
    "\ufff6\001\002\000\004\010\041\001\002\000\012\054\027" +
    "\055\026\056\032\057\030\001\002\000\006\011\uffef\012" +
    "\uffef\001\002\000\014\003\uffde\005\uffde\012\uffde\016\uffde" +
    "\053\uffde\001\002\000\014\003\uffdb\005\uffdb\012\uffdb\016" +
    "\045\053\uffdb\001\002\000\004\053\012\001\002\000\012" +
    "\003\047\005\uffe2\012\uffe2\053\uffe2\001\002\000\010\005" +
    "\uffe1\012\uffe1\053\uffe1\001\002\000\010\005\054\012\uffd9" +
    "\053\012\001\002\000\010\005\uffe3\012\uffe3\053\uffe3\001" +
    "\002\000\006\003\317\053\320\001\002\000\004\012\316" +
    "\001\002\000\010\006\uffd7\021\uffd7\053\uffd7\001\002\000" +
    "\010\006\060\021\062\053\012\001\002\000\004\053\063" +
    "\001\002\000\004\053\uffd4\001\002\000\004\012\uffda\001" +
    "\002\000\010\006\uffd8\021\uffd8\053\uffd8\001\002\000\004" +
    "\053\uffd3\001\002\000\004\017\uffd6\001\002\000\004\017" +
    "\065\001\002\000\010\003\070\020\uffd1\053\012\001\002" +
    "\000\004\053\312\001\002\000\004\020\077\001\002\000" +
    "\006\011\075\020\uffd0\001\002\000\006\011\073\020\uffd2" +
    "\001\002\000\006\011\uffcc\020\uffcc\001\002\000\004\053" +
    "\012\001\002\000\006\011\uffcd\020\uffcd\001\002\000\004" +
    "\053\012\001\002\000\006\011\uffcb\020\uffcb\001\002\000" +
    "\010\003\047\005\uffe2\053\uffe2\001\002\000\006\005\101" +
    "\053\012\001\002\000\024\005\uffce\006\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\052\uffce\053\uffce\001\002" +
    "\000\024\005\111\006\113\022\110\023\117\024\116\025" +
    "\103\026\114\052\104\053\105\001\002\000\004\017\306" +
    "\001\002\000\004\017\275\001\002\000\060\010\uff85\011" +
    "\uff85\012\uff85\013\uff85\014\uff85\017\uff85\020\uff85\027\uff85" +
    "\030\uff85\032\uff85\033\uff85\036\uff85\037\uff85\040\uff85\041" +
    "\uff85\042\uff85\043\uff85\044\uff85\045\uff85\046\uff85\047\uff85" +
    "\050\uff85\051\uff85\001\002\000\012\010\254\017\253\027" +
    "\251\030\252\001\002\000\024\005\uffc7\006\uffc7\022\uffc7" +
    "\023\uffc7\024\uffc7\025\uffc7\026\uffc7\052\uffc7\053\uffc7\001" +
    "\002\000\004\017\205\001\002\000\024\005\uffce\006\uffce" +
    "\022\uffce\023\uffce\024\uffce\025\uffce\026\uffce\052\uffce\053" +
    "\uffce\001\002\000\024\005\uffcf\006\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\052\uffcf\053\uffcf\001\002\000" +
    "\010\006\uffd5\021\uffd5\053\uffd5\001\002\000\004\017\174" +
    "\001\002\000\024\005\uffc8\006\uffc8\022\uffc8\023\uffc8\024" +
    "\uffc8\025\uffc8\026\uffc8\052\uffc8\053\uffc8\001\002\000\022" +
    "\012\uffad\017\uff99\034\123\035\uff99\053\uff99\054\uff99\056" +
    "\uff99\057\uff99\001\002\000\004\012\120\001\002\000\026" +
    "\005\uffba\006\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026" +
    "\uffba\031\uffba\052\uffba\053\uffba\001\002\000\004\012\173" +
    "\001\002\000\004\012\uffae\001\002\000\016\017\uff9a\035" +
    "\uff9a\053\uff9a\054\uff9a\056\uff9a\057\uff9a\001\002\000\016" +
    "\017\126\035\125\053\105\054\130\056\133\057\131\001" +
    "\002\000\004\053\012\001\002\000\020\017\uff99\034\123" +
    "\035\uff99\053\uff99\054\uff99\056\uff99\057\uff99\001\002\000" +
    "\046\011\uff8a\012\uff8a\014\uff8a\017\153\020\uff8a\032\uff8a" +
    "\033\uff8a\037\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\045\uff8a\046\uff8a\047\uff8a\050\uff8a\051\uff8a\001\002" +
    "\000\044\011\uff90\012\uff90\014\uff90\020\uff90\032\uff90\033" +
    "\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044\uff90" +
    "\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\001\002\000" +
    "\044\011\uff8e\012\uff8e\014\uff8e\020\uff8e\032\uff8e\033\uff8e" +
    "\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e\045" +
    "\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\001\002\000\036" +
    "\011\uff97\012\uff97\014\uff97\020\uff97\032\uff97\033\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\046\uff97\001\002\000\044\011\uff8f\012\uff8f\014\uff8f\020" +
    "\uff8f\032\uff8f\033\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051" +
    "\uff8f\001\002\000\044\011\uff93\012\uff93\014\uff93\020\uff93" +
    "\032\uff93\033\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\001\002\000\044\011\uff95\012\uff95\014\uff95\020\uff95\032" +
    "\uff95\033\uff95\037\uff95\040\uff95\041\uff95\042\uff95\043\uff95" +
    "\044\uff95\045\uff95\046\uff95\047\137\050\141\051\136\001" +
    "\002\000\016\017\uff77\035\uff77\053\uff77\054\uff77\056\uff77" +
    "\057\uff77\001\002\000\016\017\uff79\035\uff79\053\uff79\054" +
    "\uff79\056\uff79\057\uff79\001\002\000\044\011\uff94\012\uff94" +
    "\014\uff94\020\uff94\032\uff94\033\uff94\037\uff94\040\uff94\041" +
    "\uff94\042\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94" +
    "\050\uff94\051\uff94\001\002\000\016\017\uff78\035\uff78\053" +
    "\uff78\054\uff78\056\uff78\057\uff78\001\002\000\016\017\126" +
    "\035\125\053\105\054\130\056\133\057\131\001\002\000" +
    "\044\011\uff92\012\uff92\014\uff92\020\uff92\032\uff92\033\uff92" +
    "\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\045" +
    "\uff92\046\uff92\047\uff92\050\uff92\051\uff92\001\002\000\036" +
    "\011\uff9b\012\uff9b\014\uff9b\020\uff9b\032\uff9b\033\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\146" +
    "\046\145\001\002\000\016\017\uff7a\035\uff7a\053\uff7a\054" +
    "\uff7a\056\uff7a\057\uff7a\001\002\000\016\017\uff7b\035\uff7b" +
    "\053\uff7b\054\uff7b\056\uff7b\057\uff7b\001\002\000\036\011" +
    "\uff98\012\uff98\014\uff98\020\uff98\032\uff98\033\uff98\037\uff98" +
    "\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98\046" +
    "\uff98\001\002\000\016\017\126\035\125\053\105\054\130" +
    "\056\133\057\131\001\002\000\036\011\uff96\012\uff96\014" +
    "\uff96\020\uff96\032\uff96\033\uff96\037\uff96\040\uff96\041\uff96" +
    "\042\uff96\043\uff96\044\uff96\045\uff96\046\uff96\001\002\000" +
    "\044\011\uff91\012\uff91\014\uff91\020\uff91\032\uff91\033\uff91" +
    "\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91\045" +
    "\uff91\046\uff91\047\uff91\050\uff91\051\uff91\001\002\000\022" +
    "\017\uff99\020\uffaf\034\123\035\uff99\053\uff99\054\uff99\056" +
    "\uff99\057\uff99\001\002\000\004\020\163\001\002\000\004" +
    "\020\uffb0\001\002\000\006\011\uffa8\020\uffa8\001\002\000" +
    "\006\011\161\020\uffaa\001\002\000\006\011\uffa9\020\uffa9" +
    "\001\002\000\020\017\uff99\034\123\035\uff99\053\uff99\054" +
    "\uff99\056\uff99\057\uff99\001\002\000\006\011\uffa7\020\uffa7" +
    "\001\002\000\044\011\uff8b\012\uff8b\014\uff8b\020\uff8b\032" +
    "\uff8b\033\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b" +
    "\044\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\001" +
    "\002\000\004\020\165\001\002\000\044\011\uff8c\012\uff8c" +
    "\014\uff8c\020\uff8c\032\uff8c\033\uff8c\037\uff8c\040\uff8c\041" +
    "\uff8c\042\uff8c\043\uff8c\044\uff8c\045\uff8c\046\uff8c\047\uff8c" +
    "\050\uff8c\051\uff8c\001\002\000\046\011\uff88\012\uff88\013" +
    "\170\014\uff88\020\uff88\032\uff88\033\uff88\037\uff88\040\uff88" +
    "\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88\046\uff88\047" +
    "\uff88\050\uff88\051\uff88\001\002\000\044\011\uff8d\012\uff8d" +
    "\014\uff8d\020\uff8d\032\uff8d\033\uff8d\037\uff8d\040\uff8d\041" +
    "\uff8d\042\uff8d\043\uff8d\044\uff8d\045\uff8d\046\uff8d\047\uff8d" +
    "\050\uff8d\051\uff8d\001\002\000\020\017\uff99\034\123\035" +
    "\uff99\053\uff99\054\uff99\056\uff99\057\uff99\001\002\000\004" +
    "\014\172\001\002\000\044\011\uff89\012\uff89\014\uff89\020" +
    "\uff89\032\uff89\033\uff89\037\uff89\040\uff89\041\uff89\042\uff89" +
    "\043\uff89\044\uff89\045\uff89\046\uff89\047\uff89\050\uff89\051" +
    "\uff89\001\002\000\026\005\uffb9\006\uffb9\022\uffb9\023\uffb9" +
    "\024\uffb9\025\uffb9\026\uffb9\031\uffb9\052\uffb9\053\uffb9\001" +
    "\002\000\020\017\uff99\034\123\035\uff99\053\uff99\054\uff99" +
    "\056\uff99\057\uff99\001\002\000\006\011\176\020\uffab\001" +
    "\002\000\004\054\202\001\002\000\004\020\200\001\002" +
    "\000\004\012\201\001\002\000\026\005\uffb7\006\uffb7\022" +
    "\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\031\uffb7\052\uffb7" +
    "\053\uffb7\001\002\000\004\020\uffac\001\002\000\024\005" +
    "\111\006\204\022\110\023\117\024\116\025\103\026\114" +
    "\052\104\053\105\001\002\000\024\005\uffc0\006\uffc0\022" +
    "\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\052\uffc0\053\uffc0" +
    "\001\002\000\022\003\207\017\uff99\034\123\035\uff99\053" +
    "\uff99\054\uff99\056\uff99\057\uff99\001\002\000\006\020\uffa4" +
    "\032\uffa4\001\002\000\004\020\236\001\002\000\024\020" +
    "\uff9c\032\uff9c\033\uff9c\037\231\040\230\041\226\042\227" +
    "\043\233\044\225\001\002\000\010\020\uffa0\032\uffa0\033" +
    "\uffa0\001\002\000\004\020\213\001\002\000\022\005\111" +
    "\022\110\023\117\024\116\025\103\026\114\052\104\053" +
    "\105\001\002\000\024\005\uffc6\006\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\025\uffc6\026\uffc6\052\uffc6\053\uffc6\001\002\000" +
    "\026\005\uffc8\006\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8" +
    "\026\uffc8\031\216\052\uffc8\053\uffc8\001\002\000\022\005" +
    "\111\022\110\023\117\024\116\025\103\026\114\052\104" +
    "\053\105\001\002\000\024\005\uffc4\006\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\026\uffc4\052\uffc4\053\uffc4\001\002" +
    "\000\026\005\uffbe\006\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\031\uffbe\052\uffbe\053\uffbe\001\002\000\010" +
    "\020\uffa2\032\uffa2\033\222\001\002\000\020\017\uff99\034" +
    "\123\035\uff99\053\uff99\054\uff99\056\uff99\057\uff99\001\002" +
    "\000\010\020\uffa1\032\uffa1\033\uffa1\001\002\000\010\020" +
    "\uff9f\032\uff9f\033\uff9f\001\002\000\020\017\uff7c\034\uff7c" +
    "\035\uff7c\053\uff7c\054\uff7c\056\uff7c\057\uff7c\001\002\000" +
    "\020\017\uff7f\034\uff7f\035\uff7f\053\uff7f\054\uff7f\056\uff7f" +
    "\057\uff7f\001\002\000\020\017\uff7e\034\uff7e\035\uff7e\053" +
    "\uff7e\054\uff7e\056\uff7e\057\uff7e\001\002\000\020\017\uff80" +
    "\034\uff80\035\uff80\053\uff80\054\uff80\056\uff80\057\uff80\001" +
    "\002\000\020\017\uff81\034\uff81\035\uff81\053\uff81\054\uff81" +
    "\056\uff81\057\uff81\001\002\000\020\017\uff99\034\123\035" +
    "\uff99\053\uff99\054\uff99\056\uff99\057\uff99\001\002\000\020" +
    "\017\uff7d\034\uff7d\035\uff7d\053\uff7d\054\uff7d\056\uff7d\057" +
    "\uff7d\001\002\000\010\020\uff9e\032\uff9e\033\uff9e\001\002" +
    "\000\010\020\uff9d\032\uff9d\033\uff9d\001\002\000\022\005" +
    "\111\022\110\023\117\024\116\025\103\026\114\052\104" +
    "\053\105\001\002\000\024\005\uffc5\006\uffc5\022\uffc5\023" +
    "\uffc5\024\uffc5\025\uffc5\026\uffc5\052\uffc5\053\uffc5\001\002" +
    "\000\026\005\uffc8\006\uffc8\022\uffc8\023\uffc8\024\uffc8\025" +
    "\uffc8\026\uffc8\031\241\052\uffc8\053\uffc8\001\002\000\022" +
    "\005\111\022\110\023\117\024\116\025\103\026\114\052" +
    "\104\053\105\001\002\000\024\005\uffc3\006\uffc3\022\uffc3" +
    "\023\uffc3\024\uffc3\025\uffc3\026\uffc3\052\uffc3\053\uffc3\001" +
    "\002\000\026\005\uffbd\006\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\031\uffbd\052\uffbd\053\uffbd\001\002\000" +
    "\006\020\uffa6\032\246\001\002\000\006\020\uffa5\032\uffa5" +
    "\001\002\000\020\017\uff99\034\123\035\uff99\053\uff99\054" +
    "\uff99\056\uff99\057\uff99\001\002\000\006\020\uffa3\032\uffa3" +
    "\001\002\000\004\012\263\001\002\000\004\012\uffb2\001" +
    "\002\000\004\012\uffb1\001\002\000\024\003\260\017\uff99" +
    "\020\uffaf\034\123\035\uff99\053\uff99\054\uff99\056\uff99\057" +
    "\uff99\001\002\000\022\003\255\017\uff99\034\123\035\uff99" +
    "\053\uff99\054\uff99\056\uff99\057\uff99\001\002\000\004\012" +
    "\uffb5\001\002\000\004\012\uffb6\001\002\000\004\020\262" +
    "\001\002\000\004\020\261\001\002\000\004\012\uffb3\001" +
    "\002\000\004\012\uffb4\001\002\000\026\005\uffbf\006\uffbf" +
    "\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\031\uffbf\052" +
    "\uffbf\053\uffbf\001\002\000\060\010\uff87\011\uff87\012\uff87" +
    "\013\266\014\uff87\017\uff87\020\uff87\027\uff87\030\uff87\032" +
    "\uff87\033\uff87\036\265\037\uff87\040\uff87\041\uff87\042\uff87" +
    "\043\uff87\044\uff87\045\uff87\046\uff87\047\uff87\050\uff87\051" +
    "\uff87\001\002\000\004\053\274\001\002\000\022\003\270" +
    "\017\uff99\034\123\035\uff99\053\uff99\054\uff99\056\uff99\057" +
    "\uff99\001\002\000\060\010\uff86\011\uff86\012\uff86\013\uff86" +
    "\014\uff86\017\uff86\020\uff86\027\uff86\030\uff86\032\uff86\033" +
    "\uff86\036\uff86\037\uff86\040\uff86\041\uff86\042\uff86\043\uff86" +
    "\044\uff86\045\uff86\046\uff86\047\uff86\050\uff86\051\uff86\001" +
    "\002\000\004\014\273\001\002\000\004\014\272\001\002" +
    "\000\060\010\uff83\011\uff83\012\uff83\013\uff83\014\uff83\017" +
    "\uff83\020\uff83\027\uff83\030\uff83\032\uff83\033\uff83\036\uff83" +
    "\037\uff83\040\uff83\041\uff83\042\uff83\043\uff83\044\uff83\045" +
    "\uff83\046\uff83\047\uff83\050\uff83\051\uff83\001\002\000\060" +
    "\010\uff82\011\uff82\012\uff82\013\uff82\014\uff82\017\uff82\020" +
    "\uff82\027\uff82\030\uff82\032\uff82\033\uff82\036\uff82\037\uff82" +
    "\040\uff82\041\uff82\042\uff82\043\uff82\044\uff82\045\uff82\046" +
    "\uff82\047\uff82\050\uff82\051\uff82\001\002\000\060\010\uff84" +
    "\011\uff84\012\uff84\013\uff84\014\uff84\017\uff84\020\uff84\027" +
    "\uff84\030\uff84\032\uff84\033\uff84\036\uff84\037\uff84\040\uff84" +
    "\041\uff84\042\uff84\043\uff84\044\uff84\045\uff84\046\uff84\047" +
    "\uff84\050\uff84\051\uff84\001\002\000\022\003\276\017\uff99" +
    "\034\123\035\uff99\053\uff99\054\uff99\056\uff99\057\uff99\001" +
    "\002\000\004\020\303\001\002\000\004\020\300\001\002" +
    "\000\022\005\111\022\110\023\117\024\116\025\103\026" +
    "\114\052\104\053\105\001\002\000\024\005\uffc2\006\uffc2" +
    "\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\052\uffc2\053" +
    "\uffc2\001\002\000\026\005\uffbc\006\uffbc\022\uffbc\023\uffbc" +
    "\024\uffbc\025\uffbc\026\uffbc\031\uffbc\052\uffbc\053\uffbc\001" +
    "\002\000\022\005\111\022\110\023\117\024\116\025\103" +
    "\026\114\052\104\053\105\001\002\000\024\005\uffc1\006" +
    "\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1\052\uffc1" +
    "\053\uffc1\001\002\000\026\005\uffbb\006\uffbb\022\uffbb\023" +
    "\uffbb\024\uffbb\025\uffbb\026\uffbb\031\uffbb\052\uffbb\053\uffbb" +
    "\001\002\000\004\053\105\001\002\000\004\020\310\001" +
    "\002\000\004\012\311\001\002\000\026\005\uffb8\006\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\031\uffb8\052" +
    "\uffb8\053\uffb8\001\002\000\010\011\uffdf\013\313\020\uffdf" +
    "\001\002\000\004\014\315\001\002\000\006\011\uffca\020" +
    "\uffca\001\002\000\006\011\uffe0\020\uffe0\001\002\000\012" +
    "\005\uffdd\007\uffdd\015\uffdd\053\uffdd\001\002\000\006\011" +
    "\331\012\332\001\002\000\010\011\uffea\012\uffea\013\327" +
    "\001\002\000\004\012\326\001\002\000\004\011\324\001" +
    "\002\000\006\011\uffeb\012\uffe5\001\002\000\004\053\320" +
    "\001\002\000\006\011\uffec\012\uffe6\001\002\000\010\005" +
    "\uffe8\012\uffe8\053\uffe8\001\002\000\004\014\330\001\002" +
    "\000\006\011\uffe9\012\uffe9\001\002\000\004\053\320\001" +
    "\002\000\010\005\uffe7\012\uffe7\053\uffe7\001\002\000\004" +
    "\012\uffe4\001\002\000\012\003\uffdc\005\uffdc\012\uffdc\053" +
    "\uffdc\001\002\000\004\005\ufff8\001\002\000\010\006\uffd7" +
    "\021\uffd7\053\uffd7\001\002\000\010\006\340\021\062\053" +
    "\012\001\002\000\004\002\001\001\002\000\004\005\ufffa" +
    "\001\002\000\004\005\ufff9\001\002\000\004\012\351\001" +
    "\002\000\006\011\uffeb\012\uffeb\001\002\000\006\011\346" +
    "\012\347\001\002\000\004\053\320\001\002\000\012\005" +
    "\uffee\007\uffee\015\uffee\053\uffee\001\002\000\006\011\uffec" +
    "\012\uffec\001\002\000\012\005\uffed\007\uffed\015\uffed\053" +
    "\uffed\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\350\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\071\005\001\001\000\022\003\015\005\014\007\017" +
    "\061\016\062\012\063\010\065\013\073\007\001\001\000" +
    "\002\001\001\000\006\066\344\067\343\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\341\005\014\007\017\061\016\062\012\063\010\065\013" +
    "\073\007\001\001\000\022\003\340\005\014\007\017\061" +
    "\016\062\012\063\010\065\013\073\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\334\005\014\007" +
    "\017\061\016\062\012\063\010\065\013\073\007\001\001" +
    "\000\002\001\001\000\004\073\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
    "\032\001\001\000\002\001\001\000\004\011\033\001\001" +
    "\000\004\012\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\041" +
    "\001\001\000\002\001\001\000\004\101\043\001\001\000" +
    "\004\014\045\001\001\000\004\073\333\001\001\000\004" +
    "\015\047\001\001\000\002\001\001\000\010\006\050\016" +
    "\052\073\051\001\001\000\002\001\001\000\010\066\321" +
    "\067\322\070\320\001\001\000\002\001\001\000\004\004" +
    "\054\001\001\000\010\017\060\073\056\074\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\102\063\001\001" +
    "\000\002\001\001\000\012\020\066\022\070\064\071\073" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\064" +
    "\073\073\065\001\001\000\002\001\001\000\006\064\075" +
    "\073\065\001\001\000\002\001\001\000\004\015\077\001" +
    "\001\000\006\006\050\073\051\001\001\000\004\021\101" +
    "\001\001\000\012\023\111\057\114\060\106\072\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\263" +
    "\001\001\000\004\024\247\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\021\202\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\025\120\043\123\076\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\072\126\075\131\077\133\001\001" +
    "\000\004\073\165\001\001\000\006\043\123\076\163\001" +
    "\001\000\004\050\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\143\001\001\000\002\001\001\000" +
    "\004\046\134\001\001\000\006\047\137\056\141\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\072\126\077\142\001\001\000\002" +
    "\001\001\000\006\045\146\055\147\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\072\126" +
    "\075\150\077\133\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\027\153\030\154\043\123\076\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\156\001" +
    "\001\000\004\032\157\001\001\000\002\001\001\000\006" +
    "\043\123\076\161\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\051\166" +
    "\001\001\000\002\001\001\000\006\043\123\076\170\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\043\123\076\174\001\001\000\004\026\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\023\111\057" +
    "\114\060\106\072\105\001\001\000\002\001\001\000\014" +
    "\033\211\036\205\041\210\043\123\076\207\001\001\000" +
    "\004\034\243\001\001\000\002\001\001\000\006\042\233" +
    "\054\231\001\001\000\004\037\220\001\001\000\002\001" +
    "\001\000\012\023\213\057\214\060\106\072\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\057\217\060" +
    "\216\072\105\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\040\222\001\001\000\010\041\223\043\123\076" +
    "\207\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\043\123\076\234\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\023\236\057\237\060\106\072\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\057\242\060\241\072" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\035\244\001\001\000\002\001\001\000\012\036\246\041" +
    "\210\043\123\076\207\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\027" +
    "\256\030\154\043\123\076\155\001\001\000\006\043\123" +
    "\076\255\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\053\266\001\001\000" +
    "\002\001\001\000\006\043\123\076\270\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\033\276" +
    "\036\205\041\210\043\123\076\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\057\301\060\300\072\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\057" +
    "\304\060\303\072\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\072\306\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\313\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\067" +
    "\324\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\067\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\336\001\001\000\010\017\060\073" +
    "\056\074\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\067\347\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	Tab.init(); // Universe scope
	
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));
	Tab.currentScope.addToLocals(new Obj(Obj.Type, "string", CUP$MJParser$actions.stringType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;

    }


	int printCallCount = 0;
	
	int globalVarCount = 0;
	int mainVarCount = 0;
	int globalConstVarCount = 0;
	int globalArrayCount = 0;
	
	int globalFunctionCount = 0;
	int blockCount = 0;
	int funcCallCount = 0;
	int funcCallArgCount = 0;
	
	boolean mainVarFlag = false;
	//boolean inClassFlag = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currentMethod = null;
	
	Struct currType;
	
	public static Scope GLOBAL_SCOPE;
	
	public static boolean scopeIsGlobal()
	{
		return (Tab.currentScope() == GLOBAL_SCOPE);
	}
	
	public static final int String = 6;
	
	public static final Struct boolType = new Struct(Struct.Bool);
	public static final Struct stringType = new Struct(String);

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Mulop ::= PERCENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Mulop ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Addop ::= SUB 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Addop ::= ADD 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Relop ::= LEQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Relop ::= LSS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Relop ::= GEQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Relop ::= GRT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Relop ::= NEQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= EQU 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // IdentExpr ::= OSBRAC error CSBRAC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.log.debug("Uspesan oporavak od greske u IZRAZU INDEKSIRANJA NIZA na liniji " + errleft + ". Siguran simbol: ']'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentExpr",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // IdentExpr ::= OSBRAC Expr CSBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentExpr",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // IdentExpr ::= POINT IDENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentExpr",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // IdentExprList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentExprList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // IdentExprList ::= IdentExprList IdentExpr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IdentExprList",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Designator ::= IDENT IdentExprList 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
	Obj obj = Tab.find(name);
	if (obj == Tab.noObj)
	{
		parser.report_info("Greska na liniji " + nameleft + ": ime " + name + " nije deklarisano!", null);
	}
	RESULT = obj;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExprEncOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEncOp",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ExprEncOp ::= OSBRAC Expr CSBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprEncOp",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ActParsOpEncOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOpEncOp",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ActParsOpEncOp ::= OBRAC ActParsOp CBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOpEncOp",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= OBRAC Expr CBRAC 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= NEW Type ExprEncOp 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= STR_CONST 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= CHAR_CONST 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= NUMBER 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= Designator ActParsOpEncOp 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if (Obj.Meth == func.getKind()){
					if (parser.mainVarFlag) parser.funcCallCount++;
					parser.report_info("Pronadjen pozi funkcije " + func + "() na liniji " + funcleft, null);
				}
				else{
					parser.report_error("Greska na liniji " + funcleft + ": '" + func.getName() + "()' nije funkcija!", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // MulopFactor ::= Mulop Factor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactor",37, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MulopFactorList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MulopFactorList ::= MulopFactorList MulopFactor 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MulopFactorList",36, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // Term ::= Factor MulopFactorList 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // AddopTerm ::= Addop Term 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTerm",35, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // AddopTermList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // AddopTermList ::= AddopTermList AddopTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("AddopTermList",34, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // MinusOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MinusOp",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // MinusOp ::= MINUS 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MinusOp",33, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // Expr ::= MinusOp Term AddopTermList 
            {
              Struct RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // RelopExprOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelopExprOp",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RelopExprOp ::= Relop Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("RelopExprOp",32, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CondFact ::= Expr RelopExprOp 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",31, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CondFactSep ::= AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactSep",30, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondFactSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactSepList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondFactSepList ::= CondFactSepList CondFactSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactSepList",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // CondTerm ::= CondFact CondFactSepList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // CondTermSep ::= OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermSep",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // CondTermSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermSepList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // CondTermSepList ::= CondTermSepList CondTermSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermSepList",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Condition ::= CondTerm CondTermSepList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ExprSep ::= COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprSep",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ExprSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprSepList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ExprSepList ::= ExprSepList ExprSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprSepList",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ActPars ::= Expr ExprSepList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // NumSepOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumSepOp",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // NumSepOp ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumSepOp",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ExprOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprOp",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ExprOp ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprOp",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ActParsOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOp",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ActParsOp ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOp",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EExpr_ActParsOp_Inc_Dec ::= DEC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EExpr_ActParsOp_Inc_Dec",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EExpr_ActParsOp_Inc_Dec ::= INC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EExpr_ActParsOp_Inc_Dec",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EExpr_ActParsOp_Inc_Dec ::= OBRAC error CBRAC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.log.debug("Uspesan oporavak od greske u LISTI PARAMETARA ZA POZIV METODE OBJEKTA na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EExpr_ActParsOp_Inc_Dec",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EExpr_ActParsOp_Inc_Dec ::= OBRAC ActParsOp CBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EExpr_ActParsOp_Inc_Dec",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EExpr_ActParsOp_Inc_Dec ::= ASSIGN error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.log.debug("Uspesan oporavak od greske pri DODELI VREDNOSTI na liniji " + errleft + ". Siguran simbol: ';'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EExpr_ActParsOp_Inc_Dec",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EExpr_ActParsOp_Inc_Dec ::= ASSIGN Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("EExpr_ActParsOp_Inc_Dec",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Matched ::= PRINT OBRAC Expr NumSepOp CBRAC SC 
            {
              Object RESULT =null;
		
				parser.printCallCount++; /// broji pozive print funkcije (TODO izbaciti)
				if (parser.mainVarFlag) parser.funcCallCount++;
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= READ OBRAC Designator CBRAC SC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= RETURN ExprOp SC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= BREAK SC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= WHILE OBRAC error CBRAC Matched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU WHILE konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Matched ::= WHILE OBRAC Condition CBRAC Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Matched ::= IF OBRAC error CBRAC Matched ELSE Matched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU IF konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Matched ::= IF OBRAC Condition CBRAC Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Matched ::= Designator EExpr_ActParsOp_Inc_Dec SC 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if (Obj.Meth == func.getKind()){
					if (parser.mainVarFlag) parser.funcCallCount++;
					parser.report_info("Pronadjen poziv funkcije '" + func.getName() + "()' na liniji " + funcleft, null);
				}
				else{
					parser.report_error("Greska na liniji " + funcleft + ": " + func.getName() + "() nije funkcija!", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Unmatched ::= OCBRAC StatementList CCBRAC 
            {
              Object RESULT =null;
		 parser.blockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Unmatched ::= WHILE OBRAC error CBRAC Unmatched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU WHILE konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Unmatched ::= WHILE OBRAC Condition CBRAC Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Unmatched ::= IF OBRAC error CBRAC Matched ELSE Unmatched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU IF konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Unmatched ::= IF OBRAC Condition CBRAC Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Unmatched ::= IF OBRAC error CBRAC Statement 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU IF konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Unmatched ::= IF OBRAC Condition CBRAC Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",17, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj typeNode = Tab.find(typeName);
	if (typeNode == Tab.noObj){
		parser.report_error("Nije pronadjen tip " + typeName + " u tabeli simbola", null);
		currType = Tab.noType;
		RESULT = Tab.noType;
	}
	else{
		if (typeNode.getKind() == Obj.Type){
			currType = typeNode.getType();
			RESULT = typeNode.getType();
		}
		else{
			parser.report_error("Greska na liniji " + typeNameleft + ": Ime " + typeName + " ne predstavlja tip", null);
			currType = Tab.noType;
			RESULT = Tab.noType;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormPar ::= Type IDENT IndexBracOpt 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPars ::= error COMMA FormPar 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI FORMALNIH PARAMETARA FUNKCIJE na liniji " + errleft + ". Siguran simbol: ','"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FormPars ::= FormPar 
            {
              Object RESULT =null;
		 parser.funcCallArgCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FormPars ::= FormPars COMMA FormPar 
            {
              Object RESULT =null;
		 parser.funcCallArgCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormParsOp ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI FORMALNIH PARAMETARA FUNKCIJE na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOp",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // FormParsOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOp",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FormParsOp ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOp",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodType ::= VOID 
            {
              Struct RESULT =null;
		 RESULT =  Tab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // MethodType ::= Type 
            {
              Struct RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT =  retType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDecl ::= MethodType IDENT NT$2 OBRAC FormParsOp CBRAC LocalVarDeclList OCBRAC StatementList CCBRAC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
								if (name.equals("main")) parser.mainVarFlag = false;
								Tab.chainLocalSymbols(currentMethod);
								Tab.closeScope();
								if (scopeIsGlobal()) parser.globalFunctionCount++;
								parser.blockCount++;
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
								if (name.equals("main")) parser.mainVarFlag = true; // menja mainVarFlag ako je u main funkciji
								currentMethod = Tab.insert(Obj.Meth, name, retType);
								Tab.openScope();
								parser.report_info("Obradjuje se funkcija " + name + " na liniji " + nameleft, null);
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MethodDeclListOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListOp",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MethodDeclListOp ::= OCBRAC MethodDeclList CCBRAC 
            {
              Object RESULT =null;
		 parser.blockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclListOp",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ExtTypeOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtTypeOp",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ExtTypeOp ::= EXTENDS Type 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtTypeOp",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ClassDecl ::= CLASS IDENT NT$1 ExtTypeOp LocalVarDeclList MethodDeclListOp SC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 Tab.closeScope(); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$1 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						///log.info("Deklarisana klasa " + className + " na liniji " + classNameleft);
						///inside_class = true;
						Tab.insert(Obj.Type, className, new Struct(Struct.Class));
						Tab.openScope();
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // IndexBracOpt ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IndexBracOpt",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // IndexBracOpt ::= OSBRAC CSBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("IndexBracOpt",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI LOKALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: '{'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LocalVarDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LocalVarDeclList ::= LocalVarDeclList LocalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",11, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LocalVarList ::= error COMMA Var 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
						parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI LOKALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ','");
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LocalVarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LocalVarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LocalVarDecl ::= Type error SC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
						parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI LOKALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ';'");
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LocalVarDecl ::= Type LocalVarList SC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Var ::= IDENT OSBRAC CSBRAC 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			if (scopeIsGlobal()){
				parser.globalVarCount++;	// broji globalne promenljive(nizove)
				parser.globalArrayCount++; 	// broji globalne nizove
			}
			if (parser.mainVarFlag) parser.mainVarCount++;  // broji lokalne(main) promenljive(nizove)

			//Obj p = Tab.find(varName);
			parser.report_info("Deklarisana PROMENLJIVA " + varName + " na liniji " + varNameleft, null);
			Tab.insert(Obj.Var, varName, currType);
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Var ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			if (scopeIsGlobal()) parser.globalVarCount++;  // broji globalne promenljive koje nisu niz
			if (parser.mainVarFlag) parser.mainVarCount++; // broji lokalne(main) promenljive koje nisu niz

			//Obj p = Tab.find(varName);
			parser.report_info("Deklarisana PROMENLJIVA " + varName + " na liniji " + varNameleft, null);
			Tab.insert(Obj.Var, varName, currType);
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type error SC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				//if (scopeIsGlobal()){
				parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI GLOBALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ';'");
				//}
				//else{
				//	parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI LOKALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ';'");
				//}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type VarList SC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeValSep ::= COMMA IDENT ASSIGN TypeVal 
            {
              Object RESULT =null;
		 parser.globalConstVarCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeValSep",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeValSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeValSepList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeValSepList ::= TypeValSepList TypeValSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeValSepList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeVal ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeVal ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeVal ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeVal ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type IDENT ASSIGN TypeVal NT$0 TypeValSepList SC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
 parser.globalConstVarCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",62, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl_List ::= ConstDecl Class_Var_Const_DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl_List",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl_List ::= VarDecl Class_Var_Const_DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl_List",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDecl_List ::= ClassDecl Class_Var_Const_DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl_List",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Class_Var_Const_DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Class_Var_Const_DeclList ::= ConstDecl_List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Class_Var_Const_DeclList ::= VarDecl_List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Class_Var_Const_DeclList ::= ClassDecl_List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = Tab.insert(Obj.Prog, progName, Tab.noType);
	Tab.openScope();
	GLOBAL_SCOPE = Tab.currentScope();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgramName Class_Var_Const_DeclList OCBRAC MethodDeclList CCBRAC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	Tab.chainLocalSymbols(p);
	Tab.closeScope();
	parser.blockCount++;
	
	parser.log.info("Broj globalnih promenljivih = " + parser.globalVarCount);
	parser.log.info("Broj lokalnih promenljivih u Main funkciji = " + parser.mainVarCount);
	parser.log.info("Broj globalnih konstanti = " + parser.globalConstVarCount);
	parser.log.info("Broj globalnih nizova = " + parser.globalArrayCount);
	parser.log.info("\n");
	parser.log.info("Broj globalnih funkcija = " + parser.globalFunctionCount);
	parser.log.info("Broj blokova = " + parser.blockCount);
	parser.log.info("Broj poziva funkcija = " + parser.funcCallCount);
	parser.log.info("Broj deklarisanih formalnih argumenata funkcija = " + parser.funcCallArgCount);
	// TODO
	//log.info("\n");
	//[R54] - definicije unutrasnjih klasa,
	//[R55] - definicije metoda unutrasnjih klasa,
	//[R56] - deklaracije polja unutrasnjih klasa.

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

