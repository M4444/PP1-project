
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jul 06 23:15:28 CEST 2016
//----------------------------------------------------

package rs.ac.bg.etf.pp1.sm120554d;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.etf.pp1.symboltable.concepts.*;
import rs.ac.bg.etf.pp1.sm120554d.ext.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jul 06 23:15:28 CEST 2016
  */
public class MJParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MJParser() {super();}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public MJParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\206\000\002\002\010\000\002\002\004\000\002\066" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\003\002\000\002\053\004\000\002\054\004\000" +
    "\002\055\004\000\002\103\002\000\002\007\012\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\011\004\000\002\011\002\000\002\012\006" +
    "\000\002\057\005\000\002\057\005\000\002\060\005\000" +
    "\002\060\003\000\002\060\005\000\002\061\003\000\002" +
    "\061\005\000\002\006\004\000\002\062\005\000\002\062" +
    "\003\000\002\014\005\000\002\014\003\000\002\014\003" +
    "\000\002\063\005\000\002\063\003\000\002\063\004\000" +
    "\002\064\005\000\002\064\004\000\002\064\002\000\002" +
    "\104\002\000\002\005\011\000\002\013\004\000\002\013" +
    "\002\000\002\013\004\000\002\004\004\000\002\004\002" +
    "\000\002\105\002\000\002\016\014\000\002\072\003\000" +
    "\002\072\003\000\002\017\003\000\002\017\002\000\002" +
    "\017\003\000\002\020\004\000\002\020\002\000\002\021" +
    "\005\000\002\021\003\000\002\021\005\000\002\056\004" +
    "\000\002\056\006\000\002\070\002\000\002\071\003\000" +
    "\002\022\003\000\002\022\003\000\002\052\007\000\002" +
    "\052\007\000\002\052\011\000\002\052\011\000\002\052" +
    "\007\000\002\052\007\000\002\052\005\000\002\051\006" +
    "\000\002\051\006\000\002\051\007\000\002\051\007\000" +
    "\002\051\005\000\002\051\005\000\002\051\011\000\002" +
    "\051\011\000\002\051\007\000\002\051\007\000\002\051" +
    "\004\000\002\051\005\000\002\051\007\000\002\051\010" +
    "\000\002\025\003\000\002\025\002\000\002\076\003\000" +
    "\002\076\002\000\002\024\004\000\002\024\002\000\002" +
    "\026\004\000\002\027\004\000\002\027\002\000\002\030" +
    "\004\000\002\065\003\000\002\031\004\000\002\032\004" +
    "\000\002\032\002\000\002\033\004\000\002\034\004\000" +
    "\002\035\004\000\002\035\002\000\002\036\004\000\002" +
    "\037\005\000\002\037\003\000\002\074\003\000\002\074" +
    "\004\000\002\075\005\000\002\075\003\000\002\073\005" +
    "\000\002\073\003\000\002\077\003\000\002\077\006\000" +
    "\002\077\003\000\002\077\003\000\002\077\003\000\002" +
    "\077\007\000\002\077\004\000\002\077\005\000\002\067" +
    "\003\000\002\067\005\000\002\067\006\000\002\067\006" +
    "\000\002\102\003\000\002\102\003\000\002\102\003\000" +
    "\002\102\003\000\002\102\003\000\002\102\003\000\002" +
    "\101\003\000\002\101\003\000\002\050\003\000\002\050" +
    "\003\000\002\050\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\004\004\005\001\002\000\004\002\353\001" +
    "\002\000\004\053\007\001\002\000\012\005\ufffb\007\022" +
    "\015\021\053\012\001\002\000\012\005\uffff\007\uffff\015" +
    "\uffff\053\uffff\001\002\000\006\003\342\053\323\001\002" +
    "\000\004\005\ufffc\001\002\000\054\003\uffc5\005\uffc5\011" +
    "\uffc5\012\uffc5\013\uffc5\014\uffc5\020\uffc5\032\uffc5\033\uffc5" +
    "\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\053\uffc5\001\002" +
    "\000\004\005\ufffd\001\002\000\012\005\ufffb\007\022\015" +
    "\021\053\012\001\002\000\012\005\ufffb\007\022\015\021" +
    "\053\012\001\002\000\004\005\335\001\002\000\004\005" +
    "\ufffe\001\002\000\012\005\ufffb\007\022\015\021\053\012" +
    "\001\002\000\004\053\043\001\002\000\004\053\012\001" +
    "\002\000\004\053\024\001\002\000\004\010\025\001\002" +
    "\000\012\054\027\055\026\056\032\057\030\001\002\000" +
    "\006\011\ufff3\012\ufff3\001\002\000\006\011\ufff5\012\ufff5" +
    "\001\002\000\006\011\ufff2\012\ufff2\001\002\000\006\011" +
    "\ufff7\012\ufff7\001\002\000\006\011\ufff4\012\ufff4\001\002" +
    "\000\006\011\ufff0\012\ufff0\001\002\000\006\011\035\012" +
    "\037\001\002\000\004\053\040\001\002\000\006\011\ufff1" +
    "\012\ufff1\001\002\000\012\005\ufff6\007\ufff6\015\ufff6\053" +
    "\ufff6\001\002\000\004\010\041\001\002\000\012\054\027" +
    "\055\026\056\032\057\030\001\002\000\006\011\uffef\012" +
    "\uffef\001\002\000\006\005\uffdb\016\uffdb\001\002\000\006" +
    "\005\uffd8\016\045\001\002\000\006\003\333\053\012\001" +
    "\002\000\004\005\047\001\002\000\012\003\053\005\055" +
    "\006\uffdc\053\012\001\002\000\004\012\uffe3\001\002\000" +
    "\004\053\323\001\002\000\004\012\322\001\002\000\006" +
    "\005\321\012\uffe2\001\002\000\010\006\uffd5\021\uffd5\053" +
    "\uffd5\001\002\000\026\005\uffe0\006\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\052\uffe0\053\uffe0\001" +
    "\002\000\004\006\057\001\002\000\012\005\uffda\007\uffda" +
    "\015\uffda\053\uffda\001\002\000\010\006\063\021\065\053" +
    "\012\001\002\000\004\053\066\001\002\000\004\053\uffd2" +
    "\001\002\000\004\006\uffde\001\002\000\010\006\uffd6\021" +
    "\uffd6\053\uffd6\001\002\000\004\053\uffd1\001\002\000\004" +
    "\017\uffd4\001\002\000\004\017\070\001\002\000\010\003" +
    "\uffc6\020\uffc6\053\uffc6\001\002\000\010\003\074\020\uffcf" +
    "\053\012\001\002\000\004\053\316\001\002\000\004\020" +
    "\103\001\002\000\006\011\101\020\uffce\001\002\000\006" +
    "\011\077\020\uffd0\001\002\000\006\011\uffca\020\uffca\001" +
    "\002\000\004\053\012\001\002\000\006\011\uffcb\020\uffcb" +
    "\001\002\000\004\053\012\001\002\000\006\011\uffc9\020" +
    "\uffc9\001\002\000\010\003\053\005\055\053\012\001\002" +
    "\000\004\012\313\001\002\000\024\005\uffcc\006\uffcc\022" +
    "\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\052\uffcc\053\uffcc" +
    "\001\002\000\024\005\114\006\117\022\115\023\123\024" +
    "\122\025\107\026\120\052\110\053\111\001\002\000\004" +
    "\017\307\001\002\000\004\017\275\001\002\000\060\010" +
    "\uff8a\011\uff8a\012\uff8a\013\uff8a\014\uff8a\017\uff8a\020\uff8a" +
    "\027\uff8a\030\uff8a\032\uff8a\033\uff8a\036\uff8a\037\uff8a\040" +
    "\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a\045\uff8a\046\uff8a" +
    "\047\uff8a\050\uff8a\051\uff8a\001\002\000\016\010\260\013" +
    "\154\017\257\027\255\030\256\036\153\001\002\000\024" +
    "\005\uffc3\006\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\052\uffc3\053\uffc3\001\002\000\024\005\uffcc\006\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc\052\uffcc\053" +
    "\uffcc\001\002\000\004\017\211\001\002\000\024\005\uffcd" +
    "\006\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\052" +
    "\uffcd\053\uffcd\001\002\000\010\006\uffd3\021\uffd3\053\uffd3" +
    "\001\002\000\004\017\202\001\002\000\024\005\uffc4\006" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026\uffc4\052\uffc4" +
    "\053\uffc4\001\002\000\022\012\uffaa\017\130\034\125\035" +
    "\127\053\111\054\132\056\136\057\133\001\002\000\004" +
    "\012\124\001\002\000\026\005\uffb1\006\uffb1\022\uffb1\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\031\uffb1\052\uffb1\053\uffb1" +
    "\001\002\000\016\017\130\035\127\053\111\054\132\056" +
    "\136\057\133\001\002\000\004\012\uffab\001\002\000\004" +
    "\053\012\001\002\000\020\017\130\034\125\035\127\053" +
    "\111\054\132\056\136\057\133\001\002\000\052\011\uff92" +
    "\012\uff92\013\154\014\uff92\017\155\020\uff92\032\uff92\033" +
    "\uff92\036\153\037\uff92\040\uff92\041\uff92\042\uff92\043\uff92" +
    "\044\uff92\045\uff92\046\uff92\047\uff92\050\uff92\051\uff92\001" +
    "\002\000\044\011\uff90\012\uff90\014\uff90\020\uff90\032\uff90" +
    "\033\uff90\037\uff90\040\uff90\041\uff90\042\uff90\043\uff90\044" +
    "\uff90\045\uff90\046\uff90\047\uff90\050\uff90\051\uff90\001\002" +
    "\000\044\011\uff8e\012\uff8e\014\uff8e\020\uff8e\032\uff8e\033" +
    "\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e\044\uff8e" +
    "\045\uff8e\046\uff8e\047\uff8e\050\uff8e\051\uff8e\001\002\000" +
    "\036\011\uff98\012\uff98\014\uff98\020\uff98\032\uff98\033\uff98" +
    "\037\uff98\040\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\150\046\147\001\002\000\044\011\uff95\012\uff95\014\uff95" +
    "\020\uff95\032\uff95\033\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\047\143\050\144" +
    "\051\142\001\002\000\044\011\uff8f\012\uff8f\014\uff8f\020" +
    "\uff8f\032\uff8f\033\uff8f\037\uff8f\040\uff8f\041\uff8f\042\uff8f" +
    "\043\uff8f\044\uff8f\045\uff8f\046\uff8f\047\uff8f\050\uff8f\051" +
    "\uff8f\001\002\000\044\011\uff93\012\uff93\014\uff93\020\uff93" +
    "\032\uff93\033\uff93\037\uff93\040\uff93\041\uff93\042\uff93\043" +
    "\uff93\044\uff93\045\uff93\046\uff93\047\uff93\050\uff93\051\uff93" +
    "\001\002\000\004\012\141\001\002\000\026\005\uffb0\006" +
    "\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\031\uffb0" +
    "\052\uffb0\053\uffb0\001\002\000\016\017\uff7c\035\uff7c\053" +
    "\uff7c\054\uff7c\056\uff7c\057\uff7c\001\002\000\016\017\uff7e" +
    "\035\uff7e\053\uff7e\054\uff7e\056\uff7e\057\uff7e\001\002\000" +
    "\016\017\uff7d\035\uff7d\053\uff7d\054\uff7d\056\uff7d\057\uff7d" +
    "\001\002\000\016\017\130\035\127\053\111\054\132\056" +
    "\136\057\133\001\002\000\044\011\uff94\012\uff94\014\uff94" +
    "\020\uff94\032\uff94\033\uff94\037\uff94\040\uff94\041\uff94\042" +
    "\uff94\043\uff94\044\uff94\045\uff94\046\uff94\047\uff94\050\uff94" +
    "\051\uff94\001\002\000\016\017\uff7f\035\uff7f\053\uff7f\054" +
    "\uff7f\056\uff7f\057\uff7f\001\002\000\016\017\uff80\035\uff80" +
    "\053\uff80\054\uff80\056\uff80\057\uff80\001\002\000\016\017" +
    "\130\035\127\053\111\054\132\056\136\057\133\001\002" +
    "\000\044\011\uff96\012\uff96\014\uff96\020\uff96\032\uff96\033" +
    "\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96" +
    "\045\uff96\046\uff96\047\143\050\144\051\142\001\002\000" +
    "\004\053\172\001\002\000\022\003\167\017\130\034\125" +
    "\035\127\053\111\054\132\056\136\057\133\001\002\000" +
    "\022\017\130\020\uffac\034\125\035\127\053\111\054\132" +
    "\056\136\057\133\001\002\000\004\020\uffad\001\002\000" +
    "\006\011\uffa5\020\uffa5\001\002\000\004\020\161\001\002" +
    "\000\044\011\uff91\012\uff91\014\uff91\020\uff91\032\uff91\033" +
    "\uff91\037\uff91\040\uff91\041\uff91\042\uff91\043\uff91\044\uff91" +
    "\045\uff91\046\uff91\047\uff91\050\uff91\051\uff91\001\002\000" +
    "\006\011\164\020\uffa7\001\002\000\006\011\uffa6\020\uffa6" +
    "\001\002\000\020\017\130\034\125\035\127\053\111\054" +
    "\132\056\136\057\133\001\002\000\006\011\uffa4\020\uffa4" +
    "\001\002\000\004\014\171\001\002\000\004\014\170\001" +
    "\002\000\060\010\uff87\011\uff87\012\uff87\013\uff87\014\uff87" +
    "\017\uff87\020\uff87\027\uff87\030\uff87\032\uff87\033\uff87\036" +
    "\uff87\037\uff87\040\uff87\041\uff87\042\uff87\043\uff87\044\uff87" +
    "\045\uff87\046\uff87\047\uff87\050\uff87\051\uff87\001\002\000" +
    "\060\010\uff88\011\uff88\012\uff88\013\uff88\014\uff88\017\uff88" +
    "\020\uff88\027\uff88\030\uff88\032\uff88\033\uff88\036\uff88\037" +
    "\uff88\040\uff88\041\uff88\042\uff88\043\uff88\044\uff88\045\uff88" +
    "\046\uff88\047\uff88\050\uff88\051\uff88\001\002\000\060\010" +
    "\uff89\011\uff89\012\uff89\013\uff89\014\uff89\017\uff89\020\uff89" +
    "\027\uff89\030\uff89\032\uff89\033\uff89\036\uff89\037\uff89\040" +
    "\uff89\041\uff89\042\uff89\043\uff89\044\uff89\045\uff89\046\uff89" +
    "\047\uff89\050\uff89\051\uff89\001\002\000\004\020\174\001" +
    "\002\000\044\011\uff8b\012\uff8b\014\uff8b\020\uff8b\032\uff8b" +
    "\033\uff8b\037\uff8b\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044" +
    "\uff8b\045\uff8b\046\uff8b\047\uff8b\050\uff8b\051\uff8b\001\002" +
    "\000\046\011\uff8c\012\uff8c\013\176\014\uff8c\020\uff8c\032" +
    "\uff8c\033\uff8c\037\uff8c\040\uff8c\041\uff8c\042\uff8c\043\uff8c" +
    "\044\uff8c\045\uff8c\046\uff8c\047\uff8c\050\uff8c\051\uff8c\001" +
    "\002\000\020\017\130\034\125\035\127\053\111\054\132" +
    "\056\136\057\133\001\002\000\004\014\200\001\002\000" +
    "\044\011\uff8d\012\uff8d\014\uff8d\020\uff8d\032\uff8d\033\uff8d" +
    "\037\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\045" +
    "\uff8d\046\uff8d\047\uff8d\050\uff8d\051\uff8d\001\002\000\036" +
    "\011\uff97\012\uff97\014\uff97\020\uff97\032\uff97\033\uff97\037" +
    "\uff97\040\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\150" +
    "\046\147\001\002\000\020\017\130\034\125\035\127\053" +
    "\111\054\132\056\136\057\133\001\002\000\006\011\204" +
    "\020\uffa8\001\002\000\004\054\210\001\002\000\004\020" +
    "\206\001\002\000\004\012\207\001\002\000\026\005\uffae" +
    "\006\uffae\022\uffae\023\uffae\024\uffae\025\uffae\026\uffae\031" +
    "\uffae\052\uffae\053\uffae\001\002\000\004\020\uffa9\001\002" +
    "\000\022\003\215\017\130\034\125\035\127\053\111\054" +
    "\132\056\136\057\133\001\002\000\024\020\uff99\032\uff99" +
    "\033\uff99\037\251\040\246\041\244\042\245\043\247\044" +
    "\243\001\002\000\004\020\235\001\002\000\010\020\uff9c" +
    "\032\uff9c\033\uff9c\001\002\000\004\020\223\001\002\000" +
    "\006\020\uffa0\032\uffa0\001\002\000\006\020\uffa2\032\221" +
    "\001\002\000\006\020\uffa1\032\uffa1\001\002\000\020\017" +
    "\130\034\125\035\127\053\111\054\132\056\136\057\133" +
    "\001\002\000\006\020\uff9f\032\uff9f\001\002\000\022\005" +
    "\114\022\115\023\123\024\122\025\107\026\120\052\110" +
    "\053\111\001\002\000\024\005\uffc1\006\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\025\uffc1\026\uffc1\052\uffc1\053\uffc1\001\002" +
    "\000\026\005\uffc4\006\uffc4\022\uffc4\023\uffc4\024\uffc4\025" +
    "\uffc4\026\uffc4\031\226\052\uffc4\053\uffc4\001\002\000\022" +
    "\005\114\022\115\023\123\024\122\025\107\026\120\052" +
    "\110\053\111\001\002\000\024\005\uffbf\006\uffbf\022\uffbf" +
    "\023\uffbf\024\uffbf\025\uffbf\026\uffbf\052\uffbf\053\uffbf\001" +
    "\002\000\026\005\uffb4\006\uffb4\022\uffb4\023\uffb4\024\uffb4" +
    "\025\uffb4\026\uffb4\031\uffb4\052\uffb4\053\uffb4\001\002\000" +
    "\010\020\uff9e\032\uff9e\033\232\001\002\000\020\017\130" +
    "\034\125\035\127\053\111\054\132\056\136\057\133\001" +
    "\002\000\010\020\uff9d\032\uff9d\033\uff9d\001\002\000\010" +
    "\020\uff9b\032\uff9b\033\uff9b\001\002\000\022\005\114\022" +
    "\115\023\123\024\122\025\107\026\120\052\110\053\111" +
    "\001\002\000\024\005\uffc2\006\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\052\uffc2\053\uffc2\001\002\000\026" +
    "\005\uffc4\006\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\026" +
    "\uffc4\031\240\052\uffc4\053\uffc4\001\002\000\022\005\114" +
    "\022\115\023\123\024\122\025\107\026\120\052\110\053" +
    "\111\001\002\000\024\005\uffc0\006\uffc0\022\uffc0\023\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\052\uffc0\053\uffc0\001\002\000" +
    "\026\005\uffb5\006\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5" +
    "\026\uffb5\031\uffb5\052\uffb5\053\uffb5\001\002\000\020\017" +
    "\uff81\034\uff81\035\uff81\053\uff81\054\uff81\056\uff81\057\uff81" +
    "\001\002\000\020\017\uff84\034\uff84\035\uff84\053\uff84\054" +
    "\uff84\056\uff84\057\uff84\001\002\000\020\017\uff83\034\uff83" +
    "\035\uff83\053\uff83\054\uff83\056\uff83\057\uff83\001\002\000" +
    "\020\017\uff85\034\uff85\035\uff85\053\uff85\054\uff85\056\uff85" +
    "\057\uff85\001\002\000\020\017\uff82\034\uff82\035\uff82\053" +
    "\uff82\054\uff82\056\uff82\057\uff82\001\002\000\020\017\130" +
    "\034\125\035\127\053\111\054\132\056\136\057\133\001" +
    "\002\000\020\017\uff86\034\uff86\035\uff86\053\uff86\054\uff86" +
    "\056\uff86\057\uff86\001\002\000\010\020\uff9a\032\uff9a\033" +
    "\uff9a\001\002\000\024\005\114\006\254\022\115\023\123" +
    "\024\122\025\107\026\120\052\110\053\111\001\002\000" +
    "\024\005\uffbc\006\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\052\uffbc\053\uffbc\001\002\000\004\012\274\001" +
    "\002\000\004\012\273\001\002\000\024\003\266\017\130" +
    "\020\uffac\034\125\035\127\053\111\054\132\056\136\057" +
    "\133\001\002\000\022\003\262\017\130\034\125\035\127" +
    "\053\111\054\132\056\136\057\133\001\002\000\004\012" +
    "\264\001\002\000\004\012\263\001\002\000\026\005\uffba" +
    "\006\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\031" +
    "\uffba\052\uffba\053\uffba\001\002\000\026\005\uffbb\006\uffbb" +
    "\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb\031\uffbb\052" +
    "\uffbb\053\uffbb\001\002\000\004\020\271\001\002\000\004" +
    "\020\267\001\002\000\004\012\270\001\002\000\026\005" +
    "\uffb8\006\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\031\uffb8\052\uffb8\053\uffb8\001\002\000\004\012\272\001" +
    "\002\000\026\005\uffb9\006\uffb9\022\uffb9\023\uffb9\024\uffb9" +
    "\025\uffb9\026\uffb9\031\uffb9\052\uffb9\053\uffb9\001\002\000" +
    "\026\005\uffb6\006\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6" +
    "\026\uffb6\031\uffb6\052\uffb6\053\uffb6\001\002\000\026\005" +
    "\uffb7\006\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7" +
    "\031\uffb7\052\uffb7\053\uffb7\001\002\000\022\003\300\017" +
    "\130\034\125\035\127\053\111\054\132\056\136\057\133" +
    "\001\002\000\004\020\304\001\002\000\004\020\uffa3\001" +
    "\002\000\004\020\301\001\002\000\022\005\114\022\115" +
    "\023\123\024\122\025\107\026\120\052\110\053\111\001" +
    "\002\000\024\005\uffbd\006\uffbd\022\uffbd\023\uffbd\024\uffbd" +
    "\025\uffbd\026\uffbd\052\uffbd\053\uffbd\001\002\000\026\005" +
    "\uffb2\006\uffb2\022\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2" +
    "\031\uffb2\052\uffb2\053\uffb2\001\002\000\022\005\114\022" +
    "\115\023\123\024\122\025\107\026\120\052\110\053\111" +
    "\001\002\000\024\005\uffbe\006\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\052\uffbe\053\uffbe\001\002\000\026" +
    "\005\uffb3\006\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\026" +
    "\uffb3\031\uffb3\052\uffb3\053\uffb3\001\002\000\004\053\111" +
    "\001\002\000\010\013\154\020\311\036\153\001\002\000" +
    "\004\012\312\001\002\000\026\005\uffaf\006\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\026\uffaf\031\uffaf\052\uffaf\053" +
    "\uffaf\001\002\000\006\005\315\053\012\001\002\000\004" +
    "\012\uffe4\001\002\000\026\005\uffe1\006\uffe1\021\uffe1\022" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\052\uffe1\053\uffe1" +
    "\001\002\000\010\011\uffc8\013\317\020\uffc8\001\002\000" +
    "\004\014\320\001\002\000\006\011\uffc7\020\uffc7\001\002" +
    "\000\026\005\uffdf\006\uffdf\021\uffdf\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\026\uffdf\052\uffdf\053\uffdf\001\002\000\010" +
    "\005\315\006\uffdd\053\012\001\002\000\010\011\uffe9\012" +
    "\uffe9\013\330\001\002\000\006\011\326\012\uffe7\001\002" +
    "\000\006\011\uffe5\012\uffe5\001\002\000\004\053\323\001" +
    "\002\000\006\011\uffe6\012\uffe6\001\002\000\004\014\331" +
    "\001\002\000\006\011\uffe8\012\uffe8\001\002\000\004\005" +
    "\uffd9\001\002\000\004\005\uffd7\001\002\000\004\005\ufff8" +
    "\001\002\000\010\006\uffd5\021\uffd5\053\uffd5\001\002\000" +
    "\010\006\337\021\065\053\012\001\002\000\004\002\001" +
    "\001\002\000\004\005\ufffa\001\002\000\004\005\ufff9\001" +
    "\002\000\006\011\350\012\351\001\002\000\006\011\uffeb" +
    "\012\uffeb\001\002\000\006\011\345\012\346\001\002\000" +
    "\004\053\323\001\002\000\012\005\uffee\007\uffee\015\uffee" +
    "\053\uffee\001\002\000\006\011\uffec\012\uffec\001\002\000" +
    "\004\053\323\001\002\000\012\005\uffed\007\uffed\015\uffed" +
    "\053\uffed\001\002\000\006\011\uffea\012\uffea\001\002\000" +
    "\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\351\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\066\005\001\001\000\022\003\015\005\014\007\017" +
    "\053\016\054\012\055\010\057\013\071\007\001\001\000" +
    "\002\001\001\000\006\060\343\061\342\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\340\005\014\007\017\053\016\054\012\055\010\057\013" +
    "\071\007\001\001\000\022\003\337\005\014\007\017\053" +
    "\016\054\012\055\010\057\013\071\007\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\003\333\005\014\007" +
    "\017\053\016\054\012\055\010\057\013\071\007\001\001" +
    "\000\002\001\001\000\004\071\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\103" +
    "\032\001\001\000\002\001\001\000\004\011\033\001\001" +
    "\000\004\012\035\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\041" +
    "\001\001\000\002\001\001\000\004\104\043\001\001\000" +
    "\004\013\045\001\001\000\004\071\331\001\001\000\002" +
    "\001\001\000\014\006\047\014\051\063\053\064\055\071" +
    "\050\001\001\000\002\001\001\000\006\061\324\062\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\004" +
    "\057\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\063\071\061\072\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\105\066\001\001\000" +
    "\002\001\001\000\004\070\070\001\001\000\012\017\072" +
    "\021\074\056\075\071\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\056\077\071\071\001\001\000\002\001" +
    "\001\000\006\056\101\071\071\001\001\000\002\001\001" +
    "\000\012\006\047\014\103\063\104\071\050\001\001\000" +
    "\002\001\001\000\004\020\105\001\001\000\012\022\115" +
    "\051\120\052\112\067\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\020\252\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\067\130\073\134\074\125\075\133\076" +
    "\137\077\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\067\130\073\134\075\200\077\136\001\001\000" +
    "\002\001\001\000\004\071\174\001\001\000\014\067\130" +
    "\073\134\074\172\075\133\077\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\101\150" +
    "\001\001\000\004\050\144\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\067" +
    "\130\077\145\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\067\130\073\151\077\136\001" +
    "\001\000\004\050\144\001\001\000\002\001\001\000\014" +
    "\067\130\073\134\074\165\075\133\077\136\001\001\000" +
    "\020\025\157\026\155\067\130\073\134\074\156\075\133" +
    "\077\136\001\001\000\002\001\001\000\004\027\161\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\030\162" +
    "\001\001\000\002\001\001\000\014\067\130\073\134\074" +
    "\164\075\133\077\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\067\130\073\134\074\176\075" +
    "\133\077\136\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\101\150\001\001\000\014\067\130\073\134\074" +
    "\202\075\133\077\136\001\001\000\004\024\204\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\031\212\034\215" +
    "\037\213\067\130\073\134\074\211\075\133\077\136\001" +
    "\001\000\004\102\247\001\001\000\002\001\001\000\004" +
    "\035\230\001\001\000\002\001\001\000\004\032\216\001" +
    "\001\000\004\033\217\001\001\000\002\001\001\000\020" +
    "\034\221\037\213\067\130\073\134\074\211\075\133\077" +
    "\136\001\001\000\002\001\001\000\012\022\223\051\224" +
    "\052\112\067\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\051\227\052\226\067\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\036\232\001\001\000" +
    "\016\037\233\067\130\073\134\074\211\075\133\077\136" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\022" +
    "\235\051\236\052\112\067\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\051\241\052\240\067\111\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\067\130\073\134\074\251\075\133" +
    "\077\136\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\022\115\051\120\052\112\067\111\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\025" +
    "\264\026\155\067\130\073\134\074\156\075\133\077\136" +
    "\001\001\000\014\067\130\073\134\074\260\075\133\077" +
    "\136\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\031\276\034\215\037\213\065\275\067\130\073\134" +
    "\074\211\075\133\077\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\051\302\052\301" +
    "\067\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\051\305\052\304\067\111\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\067\307\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\006\313" +
    "\071\050\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\006\313\071\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\061\326" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\004\335\001\001\000\010\016\063\071\061\072" +
    "\060\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\346\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\351\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MJParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MJParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MJParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	MyTab.init(); // Universe scope
	
	
	//MyTab.currentScope.addToLocals(new Obj(Obj.Type, "bool", CUP$MJParser$actions.boolType));
	//MyTab.currentScope.addToLocals(new Obj(Obj.Type, "string", CUP$MJParser$actions.stringType));

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null)
	{
		//currSymLine = s.left;
		log.info(s.toString() + " " + s.value.toString());
	}
	return s;

    }


	int printCallCount = 0;
	
	int globalVarCount = 0;
	int mainVarCount = 0;
	int globalConstVarCount = 0;
	int globalArrayCount = 0;
	
	int globalFunctionCount = 0;
	int blockCount = 0;
	int funcCallCount = 0;
	int funcCallArgCount = 0;
	
	int classCount = 0;
	int methodCount = 0;
	int classMemberCount = 0;
	
	boolean mainVarFlag = false;
	boolean inClassFlag = false;
	boolean inWhileLoop = false;
	
	//int currSymLine = 0;
	boolean errorDetected = false;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Sintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }
	
	public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }

    public void report_info(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.info(msg.toString());
    }
	
	public void dump(){
		MyTab.dump(new MySymbolTableVisitor());
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MJParser$actions {


	Obj currMethod = null;
	Obj currClass = null;
	
	Struct currType;
	//Object currError;
	boolean returnFound = false;
	
	public static Scope GLOBAL_SCOPE;
	
	public static boolean scopeIsGlobal()
	{
		return (MyTab.currentScope() == GLOBAL_SCOPE);
	}
	
	//public static final int String = 6;
	
	//public static final Struct boolType = new Struct(Struct.Bool);
	//public static final Struct stringType = new Struct(String);

  private final MJParser parser;

  /** Constructor */
  CUP$MJParser$actions(MJParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MJParser$do_action(
    int                        CUP$MJParser$act_num,
    java_cup.runtime.lr_parser CUP$MJParser$parser,
    java.util.Stack            CUP$MJParser$stack,
    int                        CUP$MJParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MJParser$result;

      /* select the action based on the action number */
      switch (CUP$MJParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Mulop ::= PERCENT 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Mulop ::= DIV 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Mulop ::= MUL 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Mulop",38, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Addop ::= SUB 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Addop ::= ADD 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Addop",63, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Relop ::= LEQU 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Relop ::= LSS 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Relop ::= GEQU 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Relop ::= GRT 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Relop ::= NEQU 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Relop ::= EQU 
            {
              Boolean RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Relop",64, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // Designator ::= Designator OSBRAC error CSBRAC 
            {
              Obj RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.log.debug("Uspesan oporavak od greske u IZRAZU INDEKSIRANJA NIZA na liniji " + errleft + ". Siguran simbol: ']'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // Designator ::= Designator OSBRAC Expr CSBRAC 
            {
              Obj RESULT =null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj arr = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
					RESULT = MyTab.noObj;
					if(arr == MyTab.noObj)
						parser.report_error("Semanticka greska na liniji " + arrleft + ": niz \'" + arr.getName() + "\' nije deklarisana!", null);
					else
					{
						if(arr.getType().getKind() != Struct.Array)
							parser.report_error("Semanticka greska na liniji " + arrleft + ":\'" + arr.getName() + "\' nije niz!", null);
						else
						{
							if(e != MyTab.intType)
								parser.report_error("Semanticka greska na liniji " + arrleft + ": izraz indeksiranja niza \'" + arr.getName() + "\' nije tipa int!", null);
							else
							{
								// TODO uzeti stvarni clan niza
								RESULT = new Obj(Obj.Elem, "", arr.getType().getElemType());
							}
						}
					}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // Designator ::= Designator POINT IDENT 
            {
              Obj RESULT =null;
		int clasleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int clasright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj clas = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int memberleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int memberright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String member = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					RESULT = MyTab.noObj;
					
					if(clas == MyTab.noObj)
						parser.report_error("Semanticka greska na liniji " + clasleft + ": klasa \'" + clas.getName() + "\' nije deklarisana!", null);
					else
					{
						if(clas.getType().getKind() != Struct.Class)
							parser.report_error("Semanticka greska na liniji " + clasleft + ":\'" + clas.getName() + "\' nije unutrasnja klasa!", null);
						else
						{
							boolean foundMember = false;
							for(Obj currMember : clas.getType().getMembers())
							{
								if(currMember.getName().equals(member)) 
								{
									RESULT = currMember;
									foundMember = true;
									break;
								}
							}
							if(!foundMember)
								parser.report_error("Semanticka greska na liniji " + clasleft + ":\'" + member + "\' nije clan klase \'" + clas.getName() + "\'!", null);
						}
					}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // Designator ::= IDENT 
            {
              Obj RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					Obj obj = MyTab.find(name);
					if (obj == MyTab.noObj)
						parser.report_info("Greska na liniji " + nameleft + ": ime \'" + name + "\' nije deklarisano!", null);
					RESULT = obj;
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Designator",53, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // Factor ::= OBRAC Expr CBRAC 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // Factor ::= NEW Type 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
				RESULT = MyTab.noType;
				if(t.getKind() != Struct.Class)
					parser.report_error("Semanticka greska na liniji " + tleft + ": navedeni tip nije unutrasnja klasa!", null);
				else
					RESULT = t; 
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // Factor ::= NEW Type OSBRAC Expr CSBRAC 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
				RESULT = MyTab.noType;
				if(te != MyTab.intType)
					parser.report_error("Semanticka greska na liniji " + tleft + ": izraz nije tipa int!", null);
				else
					RESULT = t;
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // Factor ::= STR_CONST 
            {
              Struct RESULT =null;
		 RESULT = MyTab.stringType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // Factor ::= CHAR_CONST 
            {
              Struct RESULT =null;
		 RESULT = MyTab.charType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // Factor ::= NUMBER 
            {
              Struct RESULT =null;
		 RESULT = MyTab.intType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // Factor ::= Designator OBRAC ActParsOp CBRAC 
            {
              Struct RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				if (Obj.Meth == func.getKind())
				{
					if (parser.mainVarFlag) parser.funcCallCount++;
					parser.report_info("Pronadjen poziv funkcije \'" + func.getName() + "()\' na liniji " + funcleft, null);
					RESULT = func.getType();
				}
				else{
					parser.report_error("Greska na liniji " + funcleft + ": \'" + func.getName() + "\' nije funkcija!", null);
					RESULT = MyTab.noType;
				}
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // Factor ::= Designator 
            {
              Struct RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				RESULT = d.getType();
		   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Factor",61, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // Term ::= Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // Term ::= Term Mulop Factor 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tfleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tfright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct tf = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(t.compatibleWith(tf) && t == MyTab.intType)
			{
				RESULT = t;
			}
			else
			{
				parser.report_error("Semanticka greska na liniji " + tleft + ": nekompatibilni tipovi u Mul izrazu", null);
				RESULT = MyTab.noType;
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Term",57, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ExprAddopTerm ::= Term 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprAddopTerm",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExprAddopTerm ::= ExprAddopTerm Addop Term 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
						if(t.compatibleWith(te))
						{
							if(t == MyTab.intType || (t == MyTab.stringType && op.booleanValue()))
							{
								RESULT = t;
							}
							else
							{
								parser.report_error("Semanticka greska na liniji " + tleft + ": Add izraz sadrzi nedozvoljene tipove", null);
								RESULT = MyTab.noType;
							}
						}
						else
						{
							parser.report_error("Semanticka greska na liniji " + tleft + ": nekompatibilni tipovi u Add izrazu", null);
							RESULT = MyTab.noType;
						}
				  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprAddopTerm",59, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // Expr ::= MINUS ExprAddopTerm 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			if(te == MyTab.intType)
			{
				RESULT = te;
			}
			else
			{
				parser.report_error("Semanticka greska na liniji " + teleft + ": ne-int tip uz unarni operator -", null);
				RESULT = MyTab.noType;
			}
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // Expr ::= ExprAddopTerm 
            {
              Struct RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
			RESULT = te;
		 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Expr",58, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // CondFact ::= Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // CondFact ::= Expr Relop Expr 
            {
              Object RESULT =null;
		int te1left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int te1right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Struct te1 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int te2left = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int te2right = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct te2 = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				if(te1.compatibleWith(te2))
				{
					if(te1.isRefType() || te2.isRefType())
					{
						if(!op.booleanValue())
						{
							parser.report_error("Semanticka greska na liniji " + te1left + ": nedozvoljeni relacioni operatori uz promenljive tipa klase ili niza", null);
						}
						else
						{
							// OK
						}
					}
					//RESULT = t;
				}
				else
				{
					parser.report_error("Semanticka greska na liniji " + te1left + ": nekompatibilni tipovi u CondFact izrazu", null);
					//RESULT = MyTab.noType;
				}
			 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFact",29, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // CondFactSep ::= AND CondFact 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactSep",28, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // CondFactSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactSepList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CondFactSepList ::= CondFactSepList CondFactSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondFactSepList",27, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CondTerm ::= CondFact CondFactSepList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTerm",26, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // CondTermSep ::= OR CondTerm 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermSep",25, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // CondTermSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermSepList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // CondTermSepList ::= CondTermSepList CondTermSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("CondTermSepList",24, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Condition ::= CondTerm CondTermSepList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Condition",23, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // WhileCondition ::= Condition 
            {
              Object RESULT =null;
		 parser.inWhileLoop = true; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("WhileCondition",51, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ExprSep ::= COMMA Expr 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprSep",22, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ExprSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprSepList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ExprSepList ::= ExprSepList ExprSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprSepList",21, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ActPars ::= Expr ExprSepList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActPars",20, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // NumSepOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumSepOp",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // NumSepOp ::= COMMA NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NumSepOp",18, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ExprOp ::= 
            {
              Struct RESULT =null;
		 RESULT = MyTab.noType; /* void */ 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprOp",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ExprOp ::= Expr 
            {
              Struct RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT = t; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExprOp",60, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ActParsOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOp",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ActParsOp ::= ActPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ActParsOp",19, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Matched ::= PRINT OBRAC Expr NumSepOp CBRAC SC 
            {
              Object RESULT =null;
		int teleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int teright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct te = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		
				if(te != MyTab.intType && te != MyTab.charType && te != MyTab.boolType && te != MyTab.stringType)
					parser.report_error("Semanticka greska na liniji " + teleft + ": neadekvatni tip izraza argumenta komande read", null);
				else
				{
					parser.printCallCount++; /// broji pozive print funkcije (TODO izbaciti)
					if (parser.mainVarFlag) parser.funcCallCount++;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Matched ::= READ OBRAC Designator CBRAC SC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					parser.report_error("Semanticka greska na liniji " + dleft + ": citanje neadekvatne promenljive", null);
				else
					if(d.getType() != MyTab.intType && d.getType() != MyTab.charType && d.getType() != MyTab.boolType && d.getType() != MyTab.stringType)
						parser.report_error("Semanticka greska na liniji " + dleft + ": neadekvatni tip argumenta komande read", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Matched ::= RETURN ExprOp SC 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				returnFound = true;
				Struct currMethodType = currMethod.getType();
				if(!currMethodType.compatibleWith(t))
				{
					parser.report_error("Semanticka greska na liniji " + tleft + ": tip izraza u return naredbi ne slaze se sa tipom povratne vrednosti funkcije \'" + currMethod.getName() + "()\'", null);
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Matched ::= BREAK SC 
            {
              Object RESULT =null;
		
				if(!parser.inWhileLoop)
					parser.report_error("Semanticka greska: koriscenje iskaza break van while ciklusa", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Matched ::= WHILE OBRAC error CBRAC Matched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU WHILE konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Matched ::= WHILE OBRAC WhileCondition CBRAC Matched 
            {
              Object RESULT =null;
		 parser.inWhileLoop = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Matched ::= IF OBRAC error CBRAC Matched ELSE Matched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU IF konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Matched ::= IF OBRAC Condition CBRAC Matched ELSE Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Matched ::= Designator DEC SC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					parser.report_error("Semanticka greska na liniji " + dleft + ": dodela vrednosti u neadekvatnu promenljivu", null);
				else
					if(d.getType() != MyTab.intType)
						parser.report_error("Semanticka greska na liniji " + dleft + ": ne-int tip uz operator --", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Matched ::= Designator INC SC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					parser.report_error("Semanticka greska na liniji " + dleft + ": dodela vrednosti u neadekvatnu promenljivu", null);
				else
					if(d.getType() != MyTab.intType)
						parser.report_error("Semanticka greska na liniji " + dleft + ": ne-int tip uz operator ++", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Matched ::= Designator OBRAC error CBRAC SC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LISTI PARAMETARA ZA POZIV METODE OBJEKTA na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Matched ::= Designator OBRAC ActParsOp CBRAC SC 
            {
              Object RESULT =null;
		int funcleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int funcright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj func = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
				if (Obj.Meth == func.getKind()){
					if (parser.mainVarFlag) parser.funcCallCount++;
					parser.report_info("Pronadjen poziv funkcije \'" + func.getName() + "()\' na liniji " + funcleft, null);
					RESULT = func.getType();
				}
				else{
					parser.report_error("Greska na liniji " + funcleft + ": \'" + func.getName() + "\' nije funkcija!", null);
					RESULT = MyTab.noType;
				}
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Matched ::= Designator ASSIGN error SC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 parser.log.debug("Uspesan oporavak od greske pri DODELI VREDNOSTI na liniji " + errleft + ". Siguran simbol: ';'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Matched ::= Designator ASSIGN Expr SC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Obj d = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct e = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				if(d.getKind() != Obj.Var && d.getKind() != Obj.Elem && d.getKind() != Obj.Fld)
					parser.report_error("Semanticka greska na liniji " + dleft + ": dodela vrednosti u neadekvatnu promenljivu", null);
				else
					if(!e.assignableTo(d.getType()))
						parser.report_error("Semanticka greska na liniji " + dleft + ": nekompatibilni tipovi u dodeli vrednosti", null);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Matched",39, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Unmatched ::= OCBRAC StatementList CCBRAC 
            {
              Object RESULT =null;
		 parser.blockCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Unmatched ::= WHILE OBRAC error CBRAC Unmatched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU WHILE konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Unmatched ::= WHILE OBRAC WhileCondition CBRAC Unmatched 
            {
              Object RESULT =null;
		 parser.inWhileLoop = false; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Unmatched ::= IF OBRAC error CBRAC Matched ELSE Unmatched 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU IF konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Unmatched ::= IF OBRAC Condition CBRAC Matched ELSE Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Unmatched ::= IF OBRAC error CBRAC Statement 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske u LOGICKOM IZRAZU IF konstrukcije na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Unmatched ::= IF OBRAC Condition CBRAC Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Unmatched",40, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Statement ::= Unmatched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Statement ::= Matched 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Statement",16, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Type ::= IDENT 
            {
              Struct RESULT =null;
		int typeNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int typeNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String typeName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	Obj typeNode = MyTab.find(typeName);
	if (typeNode == MyTab.noObj)
	{
		parser.report_error("Nije pronadjen tip " + typeName + " u tabeli simbola", null);
		currType = MyTab.noType;
		RESULT = MyTab.noType;
	}
	else{
		if (typeNode.getKind() == Obj.Type)
		{
			currType = typeNode.getType();
			RESULT = typeNode.getType();
		}
		else
		{
			parser.report_error("Greska na liniji " + typeNameleft + ": ime \'" + typeName + "\' ne predstavlja tip", null);
			currType = MyTab.noType;
			RESULT = MyTab.noType;
		}
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Type",55, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // insertThis ::= 
            {
              Obj RESULT =null;
		 if(parser.inClassFlag) MyTab.insert(Obj.Var, "this", currClass.getType()); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("insertThis",54, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FormPar ::= Type IDENT OSBRAC CSBRAC 
            {
              Object RESULT =null;
		int formParNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int formParNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String formParName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		
				MyTab.insert(Obj.Var, formParName, new Struct(Struct.Array, currType));
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FormPar ::= Type IDENT 
            {
              Object RESULT =null;
		int formParNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int formParNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String formParName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
				MyTab.insert(Obj.Var, formParName, currType);
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPar",44, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FormPars ::= error COMMA FormPar 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI FORMALNIH PARAMETARA FUNKCIJE na liniji " + errleft + ". Siguran simbol: ','"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FormPars ::= FormPar 
            {
              Object RESULT =null;
		 parser.funcCallArgCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FormPars ::= FormPars COMMA FormPar 
            {
              Object RESULT =null;
		 parser.funcCallArgCount++; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormPars",15, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // StatementList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // StatementList ::= StatementList Statement 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("StatementList",14, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // FormParsOp ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI FORMALNIH PARAMETARA FUNKCIJE na liniji " + errleft + ". Siguran simbol: ')'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOp",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // FormParsOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOp",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // FormParsOp ::= FormPars 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("FormParsOp",13, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // MethodType ::= VOID 
            {
              Struct RESULT =null;
		 RESULT =  MyTab.noType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // MethodType ::= Type 
            {
              Struct RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 RESULT =  retType; 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodType",56, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // MethodDecl ::= MethodType IDENT NT$2 OBRAC insertThis FormParsOp CBRAC LocalVarDeclListWOCBRAC StatementList CCBRAC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)).value;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-8)).value;
		 
								if(!returnFound && retType != MyTab.noType) 
									parser.report_error("Semanticka greska na liniji " + methodNameleft + ": funkcija \'" + methodName + "()\' nema return iskaz", null);
								
								MyTab.chainLocalSymbols(currMethod);
								MyTab.closeScope();
								
								returnFound = false;
								currMethod = null;
								
								if (methodName.equals("main")) parser.mainVarFlag = false;
								if (scopeIsGlobal()) parser.globalFunctionCount++;
								else parser.methodCount++;
								//parser.blockCount++; nije blok NAREDBI
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDecl",12, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-9)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$2 ::= 
            {
              Object RESULT =null;
		int retTypeleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int retTyperight = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Struct retType = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		int methodNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int methodNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String methodName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
 
								if (methodName.equals("main")) parser.mainVarFlag = true; // menja mainVarFlag ako je u main funkciji
								currMethod = MyTab.insert(Obj.Meth, methodName, retType);
								MyTab.openScope();
								parser.report_info("Obradjuje se funkcija \'" + methodName + "()\' na liniji " + methodNameleft, null);
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$2",67, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // MethodDeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // MethodDeclList ::= MethodDeclList MethodDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("MethodDeclList",2, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ExtTypeOp ::= EXTENDS error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI PROSIRENJA NATKLASE na liniji " + errleft + ". Siguran simbol: '{'"); 
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtTypeOp",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ExtTypeOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtTypeOp",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ExtTypeOp ::= EXTENDS Type 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
					if(t.getKind() != Struct.Class)
						parser.report_error("Semanticka greska na liniji " + tleft + ": navedeni tip nije unutrasnja klasa!", null);
			  
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ExtTypeOp",9, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ClassDecl ::= CLASS IDENT NT$1 ExtTypeOp OCBRAC LocalVarDeclMethodDecWErrorDetOp CCBRAC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;
		 
						MyTab.chainLocalSymbols(currClass.getType());
						MyTab.closeScope();
												
						currClass = null;
						
						parser.inClassFlag = false;
						parser.classCount++;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl",3, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$1 ::= 
            {
              Object RESULT =null;
		int classNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int classNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String className = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;

						///log.info("Deklarisana klasa " + className + " na liniji " + classNameleft);
						///inside_class = true;
						currClass = MyTab.insert(Obj.Type, className, new Struct(Struct.Class));
						MyTab.openScope();
						parser.inClassFlag = true;
					
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$1",66, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LocalVarDeclMethodDecWErrorDetOp ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclMethodDecWErrorDetOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LocalVarDeclMethodDecWErrorDetOp ::= LocalVarDeclList SC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclMethodDecWErrorDetOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LocalVarDeclMethodDecWErrorDetOp ::= LocalVarDeclListWOCBRAC MethodDeclList CCBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclMethodDecWErrorDetOp",50, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LocalVarDeclListWOCBRAC ::= error OCBRAC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		 
								if(parser.inClassFlag)
									parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI POLJA UNUTRASNJE KLASE na liniji " + errleft + ". Siguran simbol: '{'"); 
								else
									parser.log.debug("Uspesan oporavak od greske pri DEKLARACIJI LOKALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: '{'"); 
							
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListWOCBRAC",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LocalVarDeclListWOCBRAC ::= OCBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListWOCBRAC",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LocalVarDeclListWOCBRAC ::= LocalVarDeclList SC OCBRAC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclListWOCBRAC",49, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LocalVarDeclList ::= error 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
							parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI LOKALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ';'");
						
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LocalVarDeclList ::= LocalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LocalVarDeclList ::= LocalVarDeclList SC LocalVarDecl 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDeclList",10, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LocalVarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LocalVarList ::= LocalVarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarList",48, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LocalVarDecl ::= Type LocalVarList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("LocalVarDecl",4, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Var ::= IDENT OSBRAC CSBRAC 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
			Obj obj = MyTab.find(varName);
			if(obj != MyTab.noObj && MyTab.currentScope().findSymbol(varName) != null)
			{
				parser.report_error("Semanticka greska na liniji " + varNameleft + ": promenljiva \'" + varName + "\' je vec deklarisana u trenutnom opsegu!", null);
			}
			else
			{
				parser.report_info("Deklarisana PROMENLJIVA \'" + varName + "\' na liniji " + varNameleft, null);
				if(parser.inClassFlag)
					MyTab.insert(Obj.Fld, varName, new Struct(Struct.Array, currType));
				else
					MyTab.insert(Obj.Var, varName, new Struct(Struct.Array, currType));
				
				if (scopeIsGlobal()){
					parser.globalVarCount++;	// broji globalne promenljive(nizove)
					parser.globalArrayCount++; 	// broji globalne nizove
				}
				if (parser.mainVarFlag) parser.mainVarCount++;  // broji lokalne(main) promenljive(nizove)
				if (parser.inClassFlag) parser.classMemberCount++; // broji polja unutrasnjih klasa(nizove)
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Var ::= IDENT 
            {
              Object RESULT =null;
		int varNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int varNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String varName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		 
			Obj obj = MyTab.find(varName);
			if(obj != MyTab.noObj && MyTab.currentScope().findSymbol(varName) != null)
			{
				parser.report_error("Semanticka greska na liniji " + varNameleft + ": promenljiva \'" + varName + "\' je vec deklarisana u trenutnom opsegu!", null);
			}
			else
			{
				parser.report_info("Deklarisana PROMENLJIVA \'" + varName + "\' na liniji " + varNameleft, null);
				if(parser.inClassFlag)
					MyTab.insert(Obj.Fld, varName, currType);
				else
					MyTab.insert(Obj.Var, varName, currType);
				
				if (scopeIsGlobal()) parser.globalVarCount++;  // broji globalne promenljive koje nisu niz
				if (parser.mainVarFlag) parser.mainVarCount++; // broji lokalne(main) promenljive koje nisu niz
				if (parser.inClassFlag) parser.classMemberCount++; // broji polja unutrasnjih klasa koje nisu niz
			}
		
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Var",47, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VarList ::= error COMMA Var 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
				parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI GLOBALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ','");
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VarList ::= Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VarList ::= VarList COMMA Var 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarList",46, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VarDecl ::= Type error SC 
            {
              Object RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		
				parser.log.debug("Uspesan oporavak od greske pri DEFINICIJI GLOBALNE PROMENLJIVE na liniji " + errleft + ". Siguran simbol: ';'");
			
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VarDecl ::= Type VarList SC 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl",45, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypeValSep ::= COMMA IDENT ASSIGN TypeVal 
            {
              Object RESULT =null;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		 
					if(!currType.equals(MyTab.intType) && !currType.equals(MyTab.charType) && !currType.equals(MyTab.boolType) && !currType.equals(MyTab.stringType))
						parser.report_error("Semanticka greska na liniji " + constNameleft + ": tip konstante \'" + constName + "\' nije adekvatan", null);
					else
					{
						MyTab.insert(Obj.Con, constName, currType);
						parser.globalConstVarCount++; // broji ostale konstante posle prve (int ...,cnt2,cnt3,...) (konstane mogu biti samo globalne pa se to ne proverava)
					}
			   
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeValSep",8, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypeValSepList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeValSepList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypeValSepList ::= TypeValSepList TypeValSep 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeValSepList",7, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TypeVal ::= STR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TypeVal ::= BOOL_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TypeVal ::= CHAR_CONST 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TypeVal ::= NUMBER 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("TypeVal",6, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ConstDecl ::= CONST Type IDENT ASSIGN TypeVal NT$0 TypeValSepList SC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-6)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)).value;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl",5, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-7)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NT$0 ::= 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).right;
		Struct t = (Struct)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-3)).value;
		int constNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).left;
		int constNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).right;
		String constName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-2)).value;
 
					if(!t.equals(MyTab.intType) && !t.equals(MyTab.charType) && !t.equals(MyTab.boolType) && !t.equals(MyTab.stringType))
						parser.report_error("Semanticka greska na liniji " + tleft + ": tip konstante \'" + constName + "\' nije adekvatan", null);
					else
					{
						MyTab.insert(Obj.Con, constName, t);
						parser.globalConstVarCount++; // broji prvu konstantu posle tipa (const int cnt1,...) (konstane mogu biti samo globalne)
					}
				
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("NT$0",65, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ConstDecl_List ::= ConstDecl Class_Var_Const_DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ConstDecl_List",43, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDecl_List ::= VarDecl Class_Var_Const_DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("VarDecl_List",42, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassDecl_List ::= ClassDecl Class_Var_Const_DeclList 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ClassDecl_List",41, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Class_Var_Const_DeclList ::= 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Class_Var_Const_DeclList ::= ConstDecl_List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Class_Var_Const_DeclList ::= VarDecl_List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Class_Var_Const_DeclList ::= ClassDecl_List 
            {
              Object RESULT =null;

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Class_Var_Const_DeclList",1, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ProgramName ::= IDENT 
            {
              Obj RESULT =null;
		int progNameleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).left;
		int progNameright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()).right;
		String progName = (String)((java_cup.runtime.Symbol) CUP$MJParser$stack.peek()).value;
		
	RESULT = MyTab.insert(Obj.Prog, progName, MyTab.noType);
	MyTab.openScope();
	GLOBAL_SCOPE = MyTab.currentScope();

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("ProgramName",52, ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)).value;
		RESULT = start_val;
              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-1)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$MJParser$parser.done_parsing();
          return CUP$MJParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= PROGRAM ProgramName Class_Var_Const_DeclList OCBRAC MethodDeclList CCBRAC 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).right;
		Obj p = (Obj)((java_cup.runtime.Symbol) CUP$MJParser$stack.elementAt(CUP$MJParser$top-4)).value;
		
	MyTab.chainLocalSymbols(p);
	MyTab.closeScope();
	//parser.blockCount++; nije blok NAREDBI
	
	// Ispis broja odredjenih elemenata
	parser.log.info("==================SINTAKSNA ANALIZA==================");
	parser.log.info("Broj globalnih promenljivih = " + parser.globalVarCount);
	parser.log.info("Broj lokalnih promenljivih u Main funkciji = " + parser.mainVarCount);
	parser.log.info("Broj globalnih konstanti = " + parser.globalConstVarCount);
	parser.log.info("Broj globalnih nizova = " + parser.globalArrayCount);
	parser.log.info("----------------------------------------------------");
	parser.log.info("Broj globalnih funkcija = " + parser.globalFunctionCount);
	parser.log.info("Broj blokova naredbi = " + parser.blockCount);
	parser.log.info("Broj poziva funkcija = " + parser.funcCallCount);
	parser.log.info("Broj deklarisanih formalnih argumenata funkcija = " + parser.funcCallArgCount);
	parser.log.info("----------------------------------------------------");
	parser.log.info("Broj unutrasnjih klasa = " + parser.classCount);
	parser.log.info("Broj metoda unutrasnjih klasa = " + parser.methodCount);
	parser.log.info("Broj polja unutrasnjih klasa = " + parser.classMemberCount);
	
	//parser.log.info("===============SADRZAJ TABELE SIMBOLA================");
	//MyTab.find("").equals("");
	parser.dump();
	
	if (!parser.errorDetected) {
		parser.log.info("Parsiranje uspesno zavrseno!");
	}
	else {
		parser.log.error("Parsiranje NIJE uspesno zavrseno!");
	}

              CUP$MJParser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$MJParser$stack.elementAt(CUP$MJParser$top-5)), ((java_cup.runtime.Symbol)CUP$MJParser$stack.peek()), RESULT);
            }
          return CUP$MJParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

